{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_cvt_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107"
                ],
              "header": ""
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107"
                ],
              "header": ""
            },
          "list_path_1_vec_align_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107"
                ],
              "header": ""
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_2":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:105",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107"
                ],
              "header": ""
            },
          "list_path_1_cvt_2":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:105",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:107"
                ],
              "header": ""
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "workaround": "Pass to your compiler a micro-architecture specialization option:\n - use march=native\n",
                "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - CVTSD2SS: 3 occurrences<<list_path_1_complex_1>>\n - CVTSS2SD: 4 occurrences<<list_path_1_complex_2>>\n",
                "title": "Complex instructions",
                "txt": "Detected COMPLEX INSTRUCTIONS.\n"
              },
              {
                "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * use march=native\n - Use vector aligned instructions:\n  1) align your arrays on 64 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 64, size); }.\n  2) inform your compiler that your arrays are vector aligned: if array 'foo' is 64 bytes-aligned, define a pointer 'p_foo' as __builtin_assume_aligned (foo, 64) and use it instead of 'foo' in the loop.\n<<image_vec_align>>",
                "details": " - MOVUPD: 6 occurrences<<list_path_1_vec_align_1>>\n",
                "title": "Vector unaligned load/store instructions",
                "txt": "Detected 6 suboptimal vector unaligned load/store instructions.\n"
              },
              {
                "workaround": "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements. Use double instead of single precision only when/where needed by numerical stability and avoid mixing precision. In C/C++, FP constants are double precision by default and must be suffixed by 'f' to make them single precision.",
                "details": " - CVTSD2SS (FP64 to FP32, scalar): 3 occurrences<<list_path_1_cvt_1>>\n - CVTSS2SD (FP32 to FP64, scalar): 4 occurrences<<list_path_1_cvt_2>>\n",
                "title": "Conversion instructions",
                "txt": "Detected expensive conversion instructions."
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "2 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n9 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n3 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in vector mode (two at a time).\n"
              },
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop is composed of 17 FP arithmetical operations:\n - 14: addition or subtraction\n - 3: multiply\nThe binary loop is loading 172 bytes (21 double precision FP elements)."
              },
              {
                "title": "Arithmetic intensity",
                "txt": "Arithmetic intensity is 0.10 FP operations per loaded or stored byte."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 81\nnb uops            : 88\nloop length        : 349\nused x86 registers : 12\nused mmx registers : 0\nused xmm registers : 4\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 5\nADD-SUB / MUL ratio: 3.67\n"
              },
              {
                "title": "Front-end",
                "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 17.60 cycles\nfront end            : 17.60 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | P0    | P1    | P2   | P3   | P4   | P5    | P6    | P7   | P8   | P9\n--------------------------------------------------------------------------------\nuops   | 17.00 | 17.00 | 8.00 | 8.00 | 0.00 | 17.00 | 17.00 | 0.00 | 0.00 | 0.00\ncycles | 17.00 | 17.00 | 8.00 | 8.00 | 0.00 | 17.00 | 17.00 | 0.00 | 0.00 | 0.00\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, BRU, ALU, DIV/SQRT\n - P1 (256 bits): ALU, VPU\n - P2 (512 bits): load\n - P3 (512 bits): load\n - P4 (256 bits): store data\n - P5 (512 bits): ALU, VPU\n - P6: ALU, BRU\n - P7: store address\n - P8: store address\n - P9 (256 bits): store data\n\nCycles executing div or sqrt instructions: NA\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 17.60\nDispatch  : 17.00\nOverall L1: 17.60\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 0%\nload   : 0%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 41%\nload    : 85%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 0%\nadd-sub : 27%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 38%\nINT+FP\nall     : 33%\nload    : 75%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 0%\nadd-sub : 23%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 28%\n"
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "INT\nall    : 11%\nload   : 12%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 12%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 10%\nFP\nall     : 16%\nload    : 22%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 12%\nadd-sub : 14%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 15%\nINT+FP\nall     : 15%\nload    : 21%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 12%\nadd-sub : 14%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 14%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 17.60 cycles. At this rate:\n - 7% of peak load performance is reached (9.77 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n"
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the loop is: 401337\n\nInstruction                    | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7 | P8 | P9 | Latency | Recip. throughput | Vectorization\n--------------------------------------------------------------------------------------------------------------------------------------------------\nLEA 0x1(%RDX),%RAX             | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nADD %R15,%RSI                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nADD %R15,%R9                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nCMP -0x40(%RBP),%RDX           | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.50              | scal (12.5%)\nMOV %RAX,%RDX                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nJE 40122d <kernel+0x7d>        | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nMOVSS (%RCX,%RDX,4),%XMM1      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1           | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nCMP $0x4,%EDI                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (6.3%)\nJB 4014e4 <kernel+0x334>       | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50              | N/A\nCMP $0x10,%EDI                 | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (6.3%)\nJB 401416 <kernel+0x266>       | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50              | N/A\nXOR %R11D,%R11D                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25              | N/A\nNOPW %CS:(%RAX,%RAX,1)         | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | N/A\nTEST %R14,%R14                 | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nJE 4014ab <kernel+0x2fb>       | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nCMP $0x2,%R14                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nJE 40143d <kernel+0x28d>       | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nCMP $0x1,%R14                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nJNE 4014e4 <kernel+0x334>      | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nMOV %RDX,%R11                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nIMUL -0x38(%RBP),%R11          | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 1                 | N/A\nADD -0x30(%RBP),%R11           | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.50              | N/A\nJMP 40147b <kernel+0x2cb>      | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0  | 0  | 0  | 0       | 1-2               | N/A\nMOV %RDX,%RAX                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nIMUL -0x38(%RBP),%RAX          | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 1                 | N/A\nMOV -0x30(%RBP),%R11           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 2       | 0.50              | N/A\nADD %RAX,%R11                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nADD -0x48(%RBP),%RAX           | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.50              | N/A\nMOVUPD (%RBX,%RAX,8),%XMM2     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50              | vect (25.0%)\nMOVUPD 0x10(%RBX,%RAX,8),%XMM3 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50              | vect (25.0%)\nADDPD %XMM2,%XMM3              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | vect (25.0%)\nMOVAPD %XMM3,%XMM2             | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nUNPCKHPD %XMM3,%XMM2           | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nADDSD %XMM3,%XMM2              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0           | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nMULSD %XMM1,%XMM2              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nADDSD %XMM2,%XMM0              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0           | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nMOVUPD 0x20(%RBX,%R11,8),%XMM2 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50              | vect (25.0%)\nMOVUPD 0x30(%RBX,%R11,8),%XMM3 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50              | vect (25.0%)\nADDPD %XMM2,%XMM3              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | vect (25.0%)\nMOVAPD %XMM3,%XMM2             | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nUNPCKHPD %XMM3,%XMM2           | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nADDSD %XMM3,%XMM2              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0           | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nMULSD %XMM1,%XMM2              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nADDSD %XMM2,%XMM0              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0           | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nJMP 4014b7 <kernel+0x307>      | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0  | 0  | 0  | 0       | 1-2               | N/A\nMOV %RDX,%R11                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nIMUL -0x38(%RBP),%R11          | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 1                 | N/A\nADD -0x30(%RBP),%R11           | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.50              | N/A\nMOVUPD (%RBX,%R11,8),%XMM2     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50              | vect (25.0%)\nMOVUPD 0x10(%RBX,%R11,8),%XMM3 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50              | vect (25.0%)\nADDPD %XMM2,%XMM3              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | vect (25.0%)\nMOVAPD %XMM3,%XMM2             | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nUNPCKHPD %XMM3,%XMM2           | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nADDSD %XMM3,%XMM2              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0           | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nMULSD %XMM1,%XMM2              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nADDSD %XMM2,%XMM0              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0           | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nTEST %R12,%R12                 | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nJE 401540 <kernel+0x390>       | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nMOVAPD %XMM1,%XMM3             | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nUNPCKLPD %XMM1,%XMM3           | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nXORPD %XMM2,%XMM2              | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25              | vect (25.0%)\nXOR %EAX,%EAX                  | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25              | N/A\nNOPW (%RAX,%RAX,1)             | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | N/A\nMOVAPD %XMM2,%XMM3             | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nSHUFPS $0x55,%XMM2,%XMM3       | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nADDSS %XMM2,%XMM3              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (6.3%)\nADDSS %XMM3,%XMM0              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (6.3%)\nMOV %R12,%RAX                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nCMP %R12,-0x50(%RBP)           | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.50              | N/A\nJNE 401550 <kernel+0x3a0>      | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nJMP 401320 <kernel+0x170>      | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0  | 0  | 0  | 0       | 1-2               | N/A\nXOR %EAX,%EAX                  | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25              | N/A\nNOPW %CS:(%RAX,%RAX,1)         | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | N/A\nJMP 401320 <kernel+0x170>      | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0  | 0  | 0  | 0       | 1-2               | N/A\n"
              }
            ],
          "header":
            [
            "3% of peak computational performance is used (0.97 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "title": "Code clean check",
                "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 17.60 to 12.50 cycles (1.41x speedup)."
              },
              {
                "workaround": " - Try another compiler or update/tune your current one:\n  * recompile with O2 or higher to enable loop vectorization and with ffast-math (included in Ofast) to extend vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "33% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 75% of SSE/AVX loads are used in vector version.\n - 23% of SSE/AVX addition or subtraction instructions are used in vector version.\n - 0% of SSE/AVX multiply instructions are used in vector version.\n - 28% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your loop is poorly vectorized.\nOnly 15% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your loop, you can lower the cost of an iteration from 17.60 to 1.82 cycles (9.67x speedup)."
              },
              {
                "title": "Execution units bottlenecks",
                "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
              }
            ],
          "potential":
            [
              {
                "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * use march=native\n - Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).\n",
                "title": "FMA",
                "txt": "Presence of both ADD/SUB and MUL operations."
              }
            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "workaround": "Pass to your compiler a micro-architecture specialization option:\n - use march=native\n",
                  "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - CVTSD2SS: 3 occurrences<<list_path_1_complex_1>>\n - CVTSS2SD: 4 occurrences<<list_path_1_complex_2>>\n",
                  "title": "Complex instructions",
                  "txt": "Detected COMPLEX INSTRUCTIONS.\n"
                },
                {
                  "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * use march=native\n - Use vector aligned instructions:\n  1) align your arrays on 64 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 64, size); }.\n  2) inform your compiler that your arrays are vector aligned: if array 'foo' is 64 bytes-aligned, define a pointer 'p_foo' as __builtin_assume_aligned (foo, 64) and use it instead of 'foo' in the loop.\n<<image_vec_align>>",
                  "details": " - MOVUPD: 6 occurrences<<list_path_1_vec_align_1>>\n",
                  "title": "Vector unaligned load/store instructions",
                  "txt": "Detected 6 suboptimal vector unaligned load/store instructions.\n"
                },
                {
                  "workaround": "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements. Use double instead of single precision only when/where needed by numerical stability and avoid mixing precision. In C/C++, FP constants are double precision by default and must be suffixed by 'f' to make them single precision.",
                  "details": " - CVTSD2SS (FP64 to FP32, scalar): 3 occurrences<<list_path_1_cvt_1>>\n - CVTSS2SD (FP32 to FP64, scalar): 4 occurrences<<list_path_1_cvt_2>>\n",
                  "title": "Conversion instructions",
                  "txt": "Detected expensive conversion instructions."
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "2 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n9 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n3 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in vector mode (two at a time).\n"
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop is composed of 17 FP arithmetical operations:\n - 14: addition or subtraction\n - 3: multiply\nThe binary loop is loading 172 bytes (21 double precision FP elements)."
                },
                {
                  "title": "Arithmetic intensity",
                  "txt": "Arithmetic intensity is 0.10 FP operations per loaded or stored byte."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 81\nnb uops            : 88\nloop length        : 349\nused x86 registers : 12\nused mmx registers : 0\nused xmm registers : 4\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 5\nADD-SUB / MUL ratio: 3.67\n"
                },
                {
                  "title": "Front-end",
                  "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 17.60 cycles\nfront end            : 17.60 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | P0    | P1    | P2   | P3   | P4   | P5    | P6    | P7   | P8   | P9\n--------------------------------------------------------------------------------\nuops   | 17.00 | 17.00 | 8.00 | 8.00 | 0.00 | 17.00 | 17.00 | 0.00 | 0.00 | 0.00\ncycles | 17.00 | 17.00 | 8.00 | 8.00 | 0.00 | 17.00 | 17.00 | 0.00 | 0.00 | 0.00\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, BRU, ALU, DIV/SQRT\n - P1 (256 bits): ALU, VPU\n - P2 (512 bits): load\n - P3 (512 bits): load\n - P4 (256 bits): store data\n - P5 (512 bits): ALU, VPU\n - P6: ALU, BRU\n - P7: store address\n - P8: store address\n - P9 (256 bits): store data\n\nCycles executing div or sqrt instructions: NA\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 17.60\nDispatch  : 17.00\nOverall L1: 17.60\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 0%\nload   : 0%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 41%\nload    : 85%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 0%\nadd-sub : 27%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 38%\nINT+FP\nall     : 33%\nload    : 75%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 0%\nadd-sub : 23%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 28%\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "INT\nall    : 11%\nload   : 12%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 12%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 10%\nFP\nall     : 16%\nload    : 22%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 12%\nadd-sub : 14%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 15%\nINT+FP\nall     : 15%\nload    : 21%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 12%\nadd-sub : 14%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 14%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 17.60 cycles. At this rate:\n - 7% of peak load performance is reached (9.77 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 401337\n\nInstruction                    | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7 | P8 | P9 | Latency | Recip. throughput | Vectorization\n--------------------------------------------------------------------------------------------------------------------------------------------------\nLEA 0x1(%RDX),%RAX             | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nADD %R15,%RSI                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nADD %R15,%R9                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nCMP -0x40(%RBP),%RDX           | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.50              | scal (12.5%)\nMOV %RAX,%RDX                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nJE 40122d <kernel+0x7d>        | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nMOVSS (%RCX,%RDX,4),%XMM1      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1           | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nCMP $0x4,%EDI                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (6.3%)\nJB 4014e4 <kernel+0x334>       | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50              | N/A\nCMP $0x10,%EDI                 | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (6.3%)\nJB 401416 <kernel+0x266>       | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50              | N/A\nXOR %R11D,%R11D                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25              | N/A\nNOPW %CS:(%RAX,%RAX,1)         | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | N/A\nTEST %R14,%R14                 | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nJE 4014ab <kernel+0x2fb>       | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nCMP $0x2,%R14                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nJE 40143d <kernel+0x28d>       | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nCMP $0x1,%R14                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nJNE 4014e4 <kernel+0x334>      | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nMOV %RDX,%R11                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nIMUL -0x38(%RBP),%R11          | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 1                 | N/A\nADD -0x30(%RBP),%R11           | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.50              | N/A\nJMP 40147b <kernel+0x2cb>      | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0  | 0  | 0  | 0       | 1-2               | N/A\nMOV %RDX,%RAX                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nIMUL -0x38(%RBP),%RAX          | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 1                 | N/A\nMOV -0x30(%RBP),%R11           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 2       | 0.50              | N/A\nADD %RAX,%R11                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nADD -0x48(%RBP),%RAX           | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.50              | N/A\nMOVUPD (%RBX,%RAX,8),%XMM2     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50              | vect (25.0%)\nMOVUPD 0x10(%RBX,%RAX,8),%XMM3 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50              | vect (25.0%)\nADDPD %XMM2,%XMM3              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | vect (25.0%)\nMOVAPD %XMM3,%XMM2             | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nUNPCKHPD %XMM3,%XMM2           | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nADDSD %XMM3,%XMM2              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0           | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nMULSD %XMM1,%XMM2              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nADDSD %XMM2,%XMM0              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0           | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nMOVUPD 0x20(%RBX,%R11,8),%XMM2 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50              | vect (25.0%)\nMOVUPD 0x30(%RBX,%R11,8),%XMM3 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50              | vect (25.0%)\nADDPD %XMM2,%XMM3              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | vect (25.0%)\nMOVAPD %XMM3,%XMM2             | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nUNPCKHPD %XMM3,%XMM2           | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nADDSD %XMM3,%XMM2              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0           | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nMULSD %XMM1,%XMM2              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nADDSD %XMM2,%XMM0              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0           | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nJMP 4014b7 <kernel+0x307>      | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0  | 0  | 0  | 0       | 1-2               | N/A\nMOV %RDX,%R11                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nIMUL -0x38(%RBP),%R11          | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 1                 | N/A\nADD -0x30(%RBP),%R11           | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.50              | N/A\nMOVUPD (%RBX,%R11,8),%XMM2     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50              | vect (25.0%)\nMOVUPD 0x10(%RBX,%R11,8),%XMM3 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50              | vect (25.0%)\nADDPD %XMM2,%XMM3              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | vect (25.0%)\nMOVAPD %XMM3,%XMM2             | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nUNPCKHPD %XMM3,%XMM2           | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nADDSD %XMM3,%XMM2              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0           | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nMULSD %XMM1,%XMM2              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nADDSD %XMM2,%XMM0              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0           | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nTEST %R12,%R12                 | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nJE 401540 <kernel+0x390>       | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nMOVAPD %XMM1,%XMM3             | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nUNPCKLPD %XMM1,%XMM3           | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nXORPD %XMM2,%XMM2              | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25              | vect (25.0%)\nXOR %EAX,%EAX                  | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25              | N/A\nNOPW (%RAX,%RAX,1)             | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | N/A\nMOVAPD %XMM2,%XMM3             | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nSHUFPS $0x55,%XMM2,%XMM3       | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nADDSS %XMM2,%XMM3              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (6.3%)\nADDSS %XMM3,%XMM0              | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (6.3%)\nMOV %R12,%RAX                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nCMP %R12,-0x50(%RBP)           | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.50              | N/A\nJNE 401550 <kernel+0x3a0>      | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nJMP 401320 <kernel+0x170>      | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0  | 0  | 0  | 0       | 1-2               | N/A\nXOR %EAX,%EAX                  | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25              | N/A\nNOPW %CS:(%RAX,%RAX,1)         | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | N/A\nJMP 401320 <kernel+0x170>      | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0  | 0  | 0  | 0       | 1-2               | N/A\n"
                }
              ],
            "header":
              [
              "3% of peak computational performance is used (0.97 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 17.60 to 12.50 cycles (1.41x speedup)."
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one:\n  * recompile with O2 or higher to enable loop vectorization and with ffast-math (included in Ofast) to extend vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "33% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 75% of SSE/AVX loads are used in vector version.\n - 23% of SSE/AVX addition or subtraction instructions are used in vector version.\n - 0% of SSE/AVX multiply instructions are used in vector version.\n - 28% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is poorly vectorized.\nOnly 15% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your loop, you can lower the cost of an iteration from 17.60 to 1.82 cycles (9.67x speedup)."
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
                }
              ],
            "potential":
              [
                {
                  "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * use march=native\n - Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).\n",
                  "title": "FMA",
                  "txt": "Presence of both ADD/SUB and MUL operations."
                }
              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The loop is defined in /home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:104-114.\n",
            "Analyzed code is defined in /home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:104-110,113-114.\n",
            "Warnings:\n - Non-innermost loop: analyzing only self part (ignoring child loops).\n - Ignoring paths for analysis\n - Too many paths. Rerun with max-paths=27\n - RecMII not computed since number of paths is unknown or > max_paths\n - Streams not analyzed since number of paths is unknown or > max_paths\n",
            "Try to simplify control and/or increase the maximum number of paths per function/loop through the 'max-paths-nb' option.\n",
            "This loop has 27 execution paths.\n",
            "The presence of multiple execution paths is typically the main/first bottleneck.\nTry to simplify control inside loop: ideally, try to remove all conditional expressions, for example by (if applicable):\n - hoisting them (moving them outside the loop)\n - turning them into conditional moves, MIN or MAX\n\n",
            "Ex: if (x<0) x=0 => x = (x<0 ? 0 : x) (or MAX(0,x) after defining the corresponding macro)\n"
            ],
          "nb_paths": 27
        }
    }
}
