{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_vec_align_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:134"
                ],
              "header": ""
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * use march=native\n - Use vector aligned instructions:\n  1) align your arrays on 64 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 64, size); }.\n  2) inform your compiler that your arrays are vector aligned: if array 'foo' is 64 bytes-aligned, define a pointer 'p_foo' as __builtin_assume_aligned (foo, 64) and use it instead of 'foo' in the loop.\n<<image_vec_align>>",
                "details": " - MOVUPS: 1 occurrences<<list_path_1_vec_align_1>>\n",
                "title": "Vector unaligned load/store instructions",
                "txt": "Detected 1 suboptimal vector unaligned load/store instructions.\n"
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "6 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in vector mode (four at a time).\n"
              },
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop is composed of 24 FP arithmetical operations:\n - 4: addition or subtraction\n - 16: multiply\n - 4: fast square root reciprocal\nThe binary loop is loading 16 bytes (4 single precision FP elements).\nThe binary loop is storing 16 bytes (4 single precision FP elements)."
              },
              {
                "title": "Arithmetic intensity",
                "txt": "Arithmetic intensity is 0.75 FP operations per loaded or stored byte."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 11\nnb uops            : 10\nloop length        : 36\nused x86 registers : 4\nused mmx registers : 0\nused xmm registers : 4\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\nADD-SUB / MUL ratio: 0.25\n"
              },
              {
                "title": "Front-end",
                "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 2.00 cycles\nfront end            : 2.00 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9\n----------------------------------------------------------------------------\nuops   | 3.00 | 3.00 | 0.50 | 0.50 | 0.50 | 1.00 | 1.00 | 0.50 | 0.50 | 0.50\ncycles | 3.00 | 3.00 | 0.50 | 0.50 | 0.50 | 1.00 | 1.00 | 0.50 | 0.50 | 0.50\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, BRU, ALU, DIV/SQRT\n - P1 (256 bits): ALU, VPU\n - P2 (512 bits): load\n - P3 (512 bits): load\n - P4 (256 bits): store data\n - P5 (512 bits): ALU, VPU\n - P6: ALU, BRU\n - P7: store address\n - P8: store address\n - P9 (256 bits): store data\n\nCycles executing div or sqrt instructions: NA\nLongest recurrence chain latency (RecMII): 1.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 2.00\nDispatch  : 3.00\nData deps.: 1.00\nOverall L1: 3.00\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "all     : 100%\nload    : 100%\nstore   : 100%\nmul     : 100%\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 100%\nother   : NA (no other vectorizable/vectorized instructions)\n"
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "all     : 25%\nload    : 25%\nstore   : 25%\nmul     : 25%\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 25%\nother   : NA (no other vectorizable/vectorized instructions)\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 3.00 cycles. At this rate:\n - 4% of peak load performance is reached (5.33 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 8% of peak store performance is reached (5.33 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Found no such bottlenecks."
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the loop is: 401200\n\nInstruction                | Nb FU | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | Latency | Recip. throughput | Vectorization\n------------------------------------------------------------------------------------------------------------------------------------------------------\nMOVUPS (%RDX,%RCX,4),%XMM2 | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 3       | 0.50              | vect (25.0%)\nRSQRTPS %XMM2,%XMM3        | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 4       | 1                 | vect (25.0%)\nMULPS %XMM3,%XMM2          | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 4       | 0.50              | vect (25.0%)\nMULPS %XMM3,%XMM2          | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 4       | 0.50              | vect (25.0%)\nADDPS %XMM0,%XMM2          | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 4       | 0.50              | vect (25.0%)\nMULPS %XMM1,%XMM3          | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 4       | 0.50              | vect (25.0%)\nMULPS %XMM2,%XMM3          | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 4       | 0.50              | vect (25.0%)\nMOVAPS %XMM3,(%R8,%RCX,4)  | 1     | 0    | 0    | 0    | 0    | 0.50 | 0    | 0    | 0.50 | 0.50 | 0.50 | 1       | 0.50              | vect (25.0%)\nADD $0x4,%RCX              | 1     | 0.25 | 0.25 | 0    | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0    | 1       | 0.25              | N/A\nCMP %RAX,%RCX              | 1     | 0.25 | 0.25 | 0    | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0    | 1       | 0.25              | N/A\nJB 401200 <kernel+0x50>    | 1     | 0.50 | 0    | 0    | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0       | 0.50              | N/A\n"
              }
            ],
          "header":
            [
            "12% of peak computational performance is used (8.00 out of 64.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * use march=native\n - Use vector aligned instructions:\n  1) align your arrays on 64 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 64, size); }.\n  2) inform your compiler that your arrays are vector aligned: if array 'foo' is 64 bytes-aligned, define a pointer 'p_foo' as __builtin_assume_aligned (foo, 64) and use it instead of 'foo' in the loop.\n",
                "details": "All SSE/AVX instructions are used in vector version (process two or more data elements in vector registers).\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your loop is vectorized, but using only 128 out of 512 bits (SSE/AVX-128 instructions on AVX-512 processors).\n<<image_4x32_512>>By fully vectorizing your loop, you can lower the cost of an iteration from 3.00 to 0.75 cycles (4.00x speedup)."
              },
              {
                "workaround": "Reduce the number of FP multiply/FMA instructions",
                "title": "Execution units bottlenecks",
                "txt": "Performance is limited by execution of FP multiply or FMA (fused multiply-add) operations (the FP multiply/FMA unit is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 3.00 to 2.00 cycles (1.50x speedup).\n"
              }
            ],
          "potential":
            [
              {
                "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * use march=native\n - Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).\n",
                "title": "FMA",
                "txt": "Presence of both ADD/SUB and MUL operations."
              }
            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * use march=native\n - Use vector aligned instructions:\n  1) align your arrays on 64 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 64, size); }.\n  2) inform your compiler that your arrays are vector aligned: if array 'foo' is 64 bytes-aligned, define a pointer 'p_foo' as __builtin_assume_aligned (foo, 64) and use it instead of 'foo' in the loop.\n<<image_vec_align>>",
                  "details": " - MOVUPS: 1 occurrences<<list_path_1_vec_align_1>>\n",
                  "title": "Vector unaligned load/store instructions",
                  "txt": "Detected 1 suboptimal vector unaligned load/store instructions.\n"
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "6 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in vector mode (four at a time).\n"
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop is composed of 24 FP arithmetical operations:\n - 4: addition or subtraction\n - 16: multiply\n - 4: fast square root reciprocal\nThe binary loop is loading 16 bytes (4 single precision FP elements).\nThe binary loop is storing 16 bytes (4 single precision FP elements)."
                },
                {
                  "title": "Arithmetic intensity",
                  "txt": "Arithmetic intensity is 0.75 FP operations per loaded or stored byte."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 11\nnb uops            : 10\nloop length        : 36\nused x86 registers : 4\nused mmx registers : 0\nused xmm registers : 4\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\nADD-SUB / MUL ratio: 0.25\n"
                },
                {
                  "title": "Front-end",
                  "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 2.00 cycles\nfront end            : 2.00 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9\n----------------------------------------------------------------------------\nuops   | 3.00 | 3.00 | 0.50 | 0.50 | 0.50 | 1.00 | 1.00 | 0.50 | 0.50 | 0.50\ncycles | 3.00 | 3.00 | 0.50 | 0.50 | 0.50 | 1.00 | 1.00 | 0.50 | 0.50 | 0.50\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, BRU, ALU, DIV/SQRT\n - P1 (256 bits): ALU, VPU\n - P2 (512 bits): load\n - P3 (512 bits): load\n - P4 (256 bits): store data\n - P5 (512 bits): ALU, VPU\n - P6: ALU, BRU\n - P7: store address\n - P8: store address\n - P9 (256 bits): store data\n\nCycles executing div or sqrt instructions: NA\nLongest recurrence chain latency (RecMII): 1.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 2.00\nDispatch  : 3.00\nData deps.: 1.00\nOverall L1: 3.00\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "all     : 100%\nload    : 100%\nstore   : 100%\nmul     : 100%\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 100%\nother   : NA (no other vectorizable/vectorized instructions)\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "all     : 25%\nload    : 25%\nstore   : 25%\nmul     : 25%\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 25%\nother   : NA (no other vectorizable/vectorized instructions)\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 3.00 cycles. At this rate:\n - 4% of peak load performance is reached (5.33 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 8% of peak store performance is reached (5.33 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Found no such bottlenecks."
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 401200\n\nInstruction                | Nb FU | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | Latency | Recip. throughput | Vectorization\n------------------------------------------------------------------------------------------------------------------------------------------------------\nMOVUPS (%RDX,%RCX,4),%XMM2 | 1     | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 3       | 0.50              | vect (25.0%)\nRSQRTPS %XMM2,%XMM3        | 1     | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 4       | 1                 | vect (25.0%)\nMULPS %XMM3,%XMM2          | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 4       | 0.50              | vect (25.0%)\nMULPS %XMM3,%XMM2          | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 4       | 0.50              | vect (25.0%)\nADDPS %XMM0,%XMM2          | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 4       | 0.50              | vect (25.0%)\nMULPS %XMM1,%XMM3          | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 4       | 0.50              | vect (25.0%)\nMULPS %XMM2,%XMM3          | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 4       | 0.50              | vect (25.0%)\nMOVAPS %XMM3,(%R8,%RCX,4)  | 1     | 0    | 0    | 0    | 0    | 0.50 | 0    | 0    | 0.50 | 0.50 | 0.50 | 1       | 0.50              | vect (25.0%)\nADD $0x4,%RCX              | 1     | 0.25 | 0.25 | 0    | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0    | 1       | 0.25              | N/A\nCMP %RAX,%RCX              | 1     | 0.25 | 0.25 | 0    | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0    | 1       | 0.25              | N/A\nJB 401200 <kernel+0x50>    | 1     | 0.50 | 0    | 0    | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0       | 0.50              | N/A\n"
                }
              ],
            "header":
              [
              "12% of peak computational performance is used (8.00 out of 64.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * use march=native\n - Use vector aligned instructions:\n  1) align your arrays on 64 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 64, size); }.\n  2) inform your compiler that your arrays are vector aligned: if array 'foo' is 64 bytes-aligned, define a pointer 'p_foo' as __builtin_assume_aligned (foo, 64) and use it instead of 'foo' in the loop.\n",
                  "details": "All SSE/AVX instructions are used in vector version (process two or more data elements in vector registers).\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is vectorized, but using only 128 out of 512 bits (SSE/AVX-128 instructions on AVX-512 processors).\n<<image_4x32_512>>By fully vectorizing your loop, you can lower the cost of an iteration from 3.00 to 0.75 cycles (4.00x speedup)."
                },
                {
                  "workaround": "Reduce the number of FP multiply/FMA instructions",
                  "title": "Execution units bottlenecks",
                  "txt": "Performance is limited by execution of FP multiply or FMA (fused multiply-add) operations (the FP multiply/FMA unit is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 3.00 to 2.00 cycles (1.50x speedup).\n"
                }
              ],
            "potential":
              [
                {
                  "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * use march=native\n - Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).\n",
                  "title": "FMA",
                  "txt": "Presence of both ADD/SUB and MUL operations."
                }
              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The loop is defined in /home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:133-134.\n",
            "It is main loop of related source loop which is unrolled by 4 (including vectorization)."
            ],
          "nb_paths": 1
        }
    }
}
