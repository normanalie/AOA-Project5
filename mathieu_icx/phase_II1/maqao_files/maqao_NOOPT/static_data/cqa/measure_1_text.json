{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "details": " - Constant unknown stride: 3 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                "title": "Slow data structures access",
                "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written"
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "1 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n"
              },
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop is composed of 1.3333333333333 FP arithmetical operations:\n - 1.33: addition or subtraction\nThe binary loop does not load or store any data."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 18.67\nnb uops            : 18.33\nloop length        : 82.67\nused x86 registers : 6.33\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n"
              },
              {
                "title": "Front-end",
                "txt": "MACRO FUSION NOT POSSIBLE\nmicro-operation queue: 3.67 cycles\nfront end            : 3.67 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9\n----------------------------------------------------------------------------\nuops   | 3.67 | 3.67 | 0.00 | 0.00 | 0.00 | 3.67 | 3.67 | 0.00 | 0.00 | 0.00\ncycles | 3.67 | 3.67 | 0.00 | 0.00 | 0.00 | 3.67 | 3.67 | 0.00 | 0.00 | 0.00\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, BRU, ALU, DIV/SQRT\n - P1 (256 bits): ALU, VPU\n - P2 (512 bits): load\n - P3 (512 bits): load\n - P4 (256 bits): store data\n - P5 (512 bits): ALU, VPU\n - P6: ALU, BRU\n - P7: store address\n - P8: store address\n - P9 (256 bits): store data\n\nCycles executing div or sqrt instructions: NA\nLongest recurrence chain latency (RecMII): 0.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 3.67\nDispatch  : 3.67\nData deps.: 0.00\nOverall L1: 3.72\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 17%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 17%\nFP\nall     : 50%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 100%\nINT+FP\nall     : 23%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 28%\n"
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "INT\nall    : 13%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 13%\nFP\nall     : 15%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 6%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 25%\nINT+FP\nall     : 13%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 6%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 14%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 3.72 cycles."
              }
            ],
          "header":
            [
            "0% of peak computational performance is used (0.33 out of 64.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try another compiler or update/tune your current one:\n  * recompile with O2 or higher to enable loop vectorization and with ffast-math (included in Ofast) to extend vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your loop is probably not vectorized.\nOnly 13% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 3.72 to 0.32 cycles (11.51x speedup)."
              }
            ],
          "potential":
            [

            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "details": " - Constant unknown stride: 2 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                  "title": "Slow data structures access",
                  "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written"
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "No instructions are processing arithmetic or math operations on FP elements. This loop is probably writing/copying data or processing integer elements."
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop does not contain any FP arithmetical operations.\nThe binary loop does not load or store any data."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 13\nnb uops            : 13\nloop length        : 62\nused x86 registers : 7\nused mmx registers : 0\nused xmm registers : 0\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n"
                },
                {
                  "title": "Front-end",
                  "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 2.60 cycles\nfront end            : 2.60 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9\n----------------------------------------------------------------------------\nuops   | 2.75 | 2.75 | 0.00 | 0.00 | 0.00 | 2.75 | 2.75 | 0.00 | 0.00 | 0.00\ncycles | 2.75 | 2.75 | 0.00 | 0.00 | 0.00 | 2.75 | 2.75 | 0.00 | 0.00 | 0.00\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, BRU, ALU, DIV/SQRT\n - P1 (256 bits): ALU, VPU\n - P2 (512 bits): load\n - P3 (512 bits): load\n - P4 (256 bits): store data\n - P5 (512 bits): ALU, VPU\n - P6: ALU, BRU\n - P7: store address\n - P8: store address\n - P9 (256 bits): store data\n\nCycles executing div or sqrt instructions: NA\nLongest recurrence chain latency (RecMII): 0.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 2.60\nDispatch  : 2.75\nData deps.: 0.00\nOverall L1: 2.75\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "all     : 0%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "all     : 10%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 10%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 2.75 cycles."
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Found no such bottlenecks."
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 401210\n\nInstruction              | Nb FU | P0   | P1   | P2 | P3 | P4 | P5   | P6   | P7 | P8 | P9 | Latency | Recip. throughput | Vectorization\n----------------------------------------------------------------------------------------------------------------------------------------\nLEA 0x1(%R9),%R10        | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nCMP %RCX,%R9             | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nMOV %R10,%R9             | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nJE 401313 <kernel+0x163> | 1     | 0.50 | 0    | 0  | 0  | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nTEST %RDI,%RDI           | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nJE 4012c0 <kernel+0x110> | 1     | 0.50 | 0    | 0  | 0  | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nXOR %R10D,%R10D          | 1     | 0    | 0    | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25              | scal (6.3%)\nMOV %RAX,%R11            | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nIMUL %R10,%R11           | 1     | 0    | 1    | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 1                 | N/A\nADD %R9,%R11             | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nLEA (%RSI,%R11,8),%R11   | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nNOPW %CS:(%RAX,%RAX,1)   | 1     | 0    | 0    | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | N/A\nJMP 401200 <kernel+0x50> | 1     | 0    | 0    | 0  | 0  | 0  | 0    | 1    | 0  | 0  | 0  | 0       | 1-2               | N/A\n"
                }
              ],
            "header":
              [
              "0% of peak computational performance is used (0.00 out of 64.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try another compiler or update/tune your current one:\n  * recompile with O2 or higher to enable loop vectorization and with ffast-math (included in Ofast) to extend vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is not vectorized.\nOnly 10% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 2.75 to 0.20 cycles (13.54x speedup)."
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
                }
              ],
            "potential":
              [

              ]
          },
          {
            "hint":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "details": " - Constant unknown stride: 5 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                  "title": "Slow data structures access",
                  "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written"
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "2 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n"
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop is composed of 2 FP arithmetical operations:\n - 2: addition or subtraction\nThe binary loop does not load or store any data."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 25\nnb uops            : 25\nloop length        : 111\nused x86 registers : 7\nused mmx registers : 0\nused xmm registers : 3\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n"
                },
                {
                  "title": "Front-end",
                  "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 5.00 cycles\nfront end            : 5.00 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9\n----------------------------------------------------------------------------\nuops   | 5.00 | 5.00 | 0.00 | 0.00 | 0.00 | 5.00 | 5.00 | 0.00 | 0.00 | 0.00\ncycles | 5.00 | 5.00 | 0.00 | 0.00 | 0.00 | 5.00 | 5.00 | 0.00 | 0.00 | 0.00\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, BRU, ALU, DIV/SQRT\n - P1 (256 bits): ALU, VPU\n - P2 (512 bits): load\n - P3 (512 bits): load\n - P4 (256 bits): store data\n - P5 (512 bits): ALU, VPU\n - P6: ALU, BRU\n - P7: store address\n - P8: store address\n - P9 (256 bits): store data\n\nCycles executing div or sqrt instructions: NA\nLongest recurrence chain latency (RecMII): 0.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 5.00\nDispatch  : 5.00\nData deps.: 0.00\nOverall L1: 5.00\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 25%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 25%\nFP\nall     : 50%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 100%\nINT+FP\nall     : 33%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 40%\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "INT\nall    : 14%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 14%\nFP\nall     : 15%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 6%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 25%\nINT+FP\nall     : 14%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 6%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 16%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 5.00 cycles."
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 401210\n\nInstruction               | Nb FU | P0   | P1   | P2 | P3 | P4 | P5   | P6   | P7 | P8 | P9 | Latency | Recip. throughput | Vectorization\n-----------------------------------------------------------------------------------------------------------------------------------------\nLEA 0x1(%R9),%R10         | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nCMP %RCX,%R9              | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nMOV %R10,%R9              | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nJE 401313 <kernel+0x163>  | 1     | 0.50 | 0    | 0  | 0  | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nTEST %RDI,%RDI            | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nJE 4012c0 <kernel+0x110>  | 1     | 0.50 | 0    | 0  | 0  | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nMOVQ %R9,%XMM4            | 1     | 0    | 0    | 0  | 0  | 0  | 1    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nPSHUFD $0x44,%XMM4,%XMM5  | 1     | 0    | 0.50 | 0  | 0  | 0  | 0.50 | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nPXOR %XMM4,%XMM4          | 1     | 0    | 0    | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nXOR %R10D,%R10D           | 1     | 0    | 0    | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25              | scal (6.3%)\nNOPW (%RAX,%RAX,1)        | 1     | 0    | 0    | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | N/A\nMOVAPD %XMM4,%XMM5        | 1     | 0    | 0    | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nSHUFPS $0x55,%XMM4,%XMM5  | 1     | 0    | 0.50 | 0  | 0  | 0  | 0.50 | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nADDSS %XMM4,%XMM5         | 1     | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (6.3%)\nADDSS %XMM5,%XMM0         | 1     | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (6.3%)\nMOV %RDI,%R10             | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nCMP %EAX,%EDI             | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (6.3%)\nJE 401200 <kernel+0x50>   | 1     | 0.50 | 0    | 0  | 0  | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nJMP 4012c3 <kernel+0x113> | 1     | 0    | 0    | 0  | 0  | 0  | 0    | 1    | 0  | 0  | 0  | 0       | 1-2               | N/A\nMOV %RAX,%R11             | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nIMUL %R10,%R11            | 1     | 0    | 1    | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 1                 | N/A\nADD %R9,%R11              | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nLEA (%RSI,%R11,8),%R11    | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nNOPW %CS:(%RAX,%RAX,1)    | 1     | 0    | 0    | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | N/A\nJMP 401200 <kernel+0x50>  | 1     | 0    | 0    | 0  | 0  | 0  | 0    | 1    | 0  | 0  | 0  | 0       | 1-2               | N/A\n"
                }
              ],
            "header":
              [
              "0% of peak computational performance is used (0.40 out of 64.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 5.00 to 3.25 cycles (1.54x speedup)."
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one:\n  * recompile with O2 or higher to enable loop vectorization and with ffast-math (included in Ofast) to extend vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is probably not vectorized.\nOnly 14% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 5.00 to 0.44 cycles (11.43x speedup)."
                },
                {
                  "workaround": "Reduce the number of FP multiply/FMA instructions",
                  "title": "Execution units bottlenecks",
                  "txt": "Performance is limited by execution of FP multiply or FMA (fused multiply-add) operations (the FP multiply/FMA unit is a bottleneck).\n"
                }
              ],
            "potential":
              [

              ]
          },
          {
            "hint":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "details": " - Constant unknown stride: 3 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                  "title": "Slow data structures access",
                  "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written"
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "2 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n"
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop is composed of 2 FP arithmetical operations:\n - 2: addition or subtraction\nThe binary loop does not load or store any data."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 18\nnb uops            : 17\nloop length        : 75\nused x86 registers : 5\nused mmx registers : 0\nused xmm registers : 3\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n"
                },
                {
                  "title": "Front-end",
                  "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 3.40 cycles\nfront end            : 3.40 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9\n----------------------------------------------------------------------------\nuops   | 3.25 | 3.25 | 0.00 | 0.00 | 0.00 | 3.25 | 3.25 | 0.00 | 0.00 | 0.00\ncycles | 3.25 | 3.25 | 0.00 | 0.00 | 0.00 | 3.25 | 3.25 | 0.00 | 0.00 | 0.00\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, BRU, ALU, DIV/SQRT\n - P1 (256 bits): ALU, VPU\n - P2 (512 bits): load\n - P3 (512 bits): load\n - P4 (256 bits): store data\n - P5 (512 bits): ALU, VPU\n - P6: ALU, BRU\n - P7: store address\n - P8: store address\n - P9 (256 bits): store data\n\nCycles executing div or sqrt instructions: NA\nLongest recurrence chain latency (RecMII): 0.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 3.40\nDispatch  : 3.25\nData deps.: 0.00\nOverall L1: 3.40\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 28%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 28%\nFP\nall     : 50%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 100%\nINT+FP\nall     : 36%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 44%\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "INT\nall    : 15%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 15%\nFP\nall     : 15%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 6%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 25%\nINT+FP\nall     : 15%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 6%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 17%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 3.40 cycles."
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 401210\n\nInstruction              | Nb FU | P0   | P1   | P2 | P3 | P4 | P5   | P6   | P7 | P8 | P9 | Latency | Recip. throughput | Vectorization\n----------------------------------------------------------------------------------------------------------------------------------------\nLEA 0x1(%R9),%R10        | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nCMP %RCX,%R9             | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nMOV %R10,%R9             | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nJE 401313 <kernel+0x163> | 1     | 0.50 | 0    | 0  | 0  | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nTEST %RDI,%RDI           | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nJE 4012c0 <kernel+0x110> | 1     | 0.50 | 0    | 0  | 0  | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\nMOVQ %R9,%XMM4           | 1     | 0    | 0    | 0  | 0  | 0  | 1    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nPSHUFD $0x44,%XMM4,%XMM5 | 1     | 0    | 0.50 | 0  | 0  | 0  | 0.50 | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nPXOR %XMM4,%XMM4         | 1     | 0    | 0    | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nXOR %R10D,%R10D          | 1     | 0    | 0    | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25              | scal (6.3%)\nNOPW (%RAX,%RAX,1)       | 1     | 0    | 0    | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | N/A\nMOVAPD %XMM4,%XMM5       | 1     | 0    | 0    | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nSHUFPS $0x55,%XMM4,%XMM5 | 1     | 0    | 0.50 | 0  | 0  | 0  | 0.50 | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nADDSS %XMM4,%XMM5        | 1     | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (6.3%)\nADDSS %XMM5,%XMM0        | 1     | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (6.3%)\nMOV %RDI,%R10            | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | scal (12.5%)\nCMP %EAX,%EDI            | 1     | 0.25 | 0.25 | 0  | 0  | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nJE 401200 <kernel+0x50>  | 1     | 0.50 | 0    | 0  | 0  | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\n"
                }
              ],
            "header":
              [
              "0% of peak computational performance is used (0.59 out of 64.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 3.40 to 2.50 cycles (1.36x speedup)."
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one:\n  * recompile with O2 or higher to enable loop vectorization and with ffast-math (included in Ofast) to extend vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is probably not vectorized.\nOnly 15% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 3.40 to 0.33 cycles (10.36x speedup)."
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
                }
              ],
            "potential":
              [

              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The loop is defined in /home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:165-167.\n",
            "Warnings:\nNon-innermost loop: analyzing only self part (ignoring child loops).",
            "This loop has 3 execution paths.\n",
            "The presence of multiple execution paths is typically the main/first bottleneck.\nTry to simplify control inside loop: ideally, try to remove all conditional expressions, for example by (if applicable):\n - hoisting them (moving them outside the loop)\n - turning them into conditional moves, MIN or MAX\n\n",
            "Ex: if (x<0) x=0 => x = (x<0 ? 0 : x) (or MAX(0,x) after defining the corresponding macro)\n"
            ],
          "nb_paths": 3
        }
    }
}
