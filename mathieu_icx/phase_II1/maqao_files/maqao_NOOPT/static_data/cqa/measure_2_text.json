{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_cvt_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:167"
                ],
              "header": ""
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:167"
                ],
              "header": ""
            },
          "list_path_1_vec_align_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:167"
                ],
              "header": ""
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_2":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:167"
                ],
              "header": ""
            },
          "list_path_1_cvt_2":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:167",
                "/home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:167"
                ],
              "header": ""
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "workaround": "Pass to your compiler a micro-architecture specialization option:\n - use march=native\n",
                "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - CVTPD2PS: 1 occurrences<<list_path_1_complex_1>>\n - CVTPS2PD: 1 occurrences<<list_path_1_complex_2>>\n",
                "title": "Complex instructions",
                "txt": "Detected COMPLEX INSTRUCTIONS.\n"
              },
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "details": " - Constant unknown stride: 2 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                "title": "Slow data structures access",
                "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written"
              },
              {
                "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * use march=native\n - Use vector aligned instructions:\n  1) align your arrays on 64 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 64, size); }.\n  2) inform your compiler that your arrays are vector aligned: if array 'foo' is 64 bytes-aligned, define a pointer 'p_foo' as __builtin_assume_aligned (foo, 64) and use it instead of 'foo' in the loop.\n<<image_vec_align>>",
                "details": " - MOVHPD: 1 occurrences<<list_path_1_vec_align_1>>\n",
                "title": "Vector unaligned load/store instructions",
                "txt": "Detected 1 suboptimal vector unaligned load/store instructions.\n"
              },
              {
                "workaround": "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements. Use double instead of single precision only when/where needed by numerical stability and avoid mixing precision. In C/C++, FP constants are double precision by default and must be suffixed by 'f' to make them single precision.",
                "details": " - CVTPD2PS (FP64 to FP32, SIMD): 1 occurrences<<list_path_1_cvt_1>>\n - CVTPS2PD (FP32 to FP64, SIMD): 2 occurrences<<list_path_1_cvt_2>>\n",
                "title": "Conversion instructions",
                "txt": "Detected expensive conversion instructions."
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "3 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in vector mode (two at a time).\n"
              },
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop is composed of 6 FP arithmetical operations:\n - 2: addition or subtraction\n - 2: divide\n - 2: square root\nThe binary loop is loading 24 bytes (3 double precision FP elements)."
              },
              {
                "title": "Arithmetic intensity",
                "txt": "Arithmetic intensity is 0.25 FP operations per loaded or stored byte."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 26\nnb uops            : 27\nloop length        : 115\nused x86 registers : 5\nused mmx registers : 0\nused xmm registers : 8\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n"
              },
              {
                "title": "Front-end",
                "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 5.40 cycles\nfront end            : 5.40 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9\n----------------------------------------------------------------------------\nuops   | 7.67 | 7.67 | 1.50 | 1.50 | 0.00 | 7.67 | 2.00 | 0.00 | 0.00 | 0.00\ncycles | 7.67 | 7.67 | 1.50 | 1.50 | 0.00 | 7.67 | 2.00 | 0.00 | 0.00 | 0.00\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, BRU, ALU, DIV/SQRT\n - P1 (256 bits): ALU, VPU\n - P2 (512 bits): load\n - P3 (512 bits): load\n - P4 (256 bits): store data\n - P5 (512 bits): ALU, VPU\n - P6: ALU, BRU\n - P7: store address\n - P8: store address\n - P9 (256 bits): store data\n\nCycles executing div or sqrt instructions: 8.50-10.00\nLongest recurrence chain latency (RecMII): 14.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 5.40\nDispatch  : 7.67\nDIV/SQRT  : 8.50-10.00\nData deps.: 14.00\nOverall L1: 14.00\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 80%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : 100%\nadd-sub: 100%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 70%\nFP\nall     : 75%\nload    : 33%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 100%\nother   : 100%\nINT+FP\nall     : 78%\nload    : 33%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 100%\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 100%\nother   : 76%\n"
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "INT\nall    : 20%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : 12%\nadd-sub: 25%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 21%\nFP\nall     : 18%\nload    : 12%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 25%\nother   : 16%\nINT+FP\nall     : 20%\nload    : 12%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 12%\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 25%\nother   : 20%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 14.00 cycles. At this rate:\n - 1% of peak load performance is reached (1.71 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Found no such bottlenecks."
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the loop is: 401230\n\nInstruction                  | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7 | P8 | P9 | Latency | Recip. throughput | Vectorization\n------------------------------------------------------------------------------------------------------------------------------------------------\nCVTPS2PD (%RDX,%R10,4),%XMM6 | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 5       | 0.50              | vect (12.5%)\nMOVQ %R10,%XMM7              | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nPSHUFD $0x44,%XMM7,%XMM7     | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nSQRTPD %XMM6,%XMM6           | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | vect (25.0%)\nMOVDQA %XMM7,%XMM8           | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nPOR %XMM2,%XMM8              | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0  | 0  | 0  | 1       | 0.33              | vect (25.0%)\nPSRLQ $0x20,%XMM7            | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nPMULUDQ %XMM1,%XMM8          | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 5       | 0.50              | vect (12.5%)\nPMULUDQ %XMM1,%XMM7          | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 5       | 0.50              | vect (12.5%)\nPSLLQ $0x20,%XMM7            | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nPADDQ %XMM5,%XMM7            | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0  | 0  | 0  | 1       | 0.33              | vect (25.0%)\nPADDQ %XMM8,%XMM7            | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0  | 0  | 0  | 1       | 0.33              | vect (25.0%)\nPSLLQ $0x3,%XMM7             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nPADDQ %XMM3,%XMM7            | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0  | 0  | 0  | 1       | 0.33              | vect (25.0%)\nPSHUFD $-0x12,%XMM7,%XMM8    | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nMOVQ %XMM7,%R11              | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nMOVQ %XMM8,%RBX              | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nMOVSD (%R11),%XMM7           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nMOVHPD (%RBX),%XMM7          | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 1    | 0    | 0  | 0  | 0  | 4       | 1                 | scal (12.5%)\nDIVPD %XMM6,%XMM7            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | vect (25.0%)\nCVTPS2PD %XMM4,%XMM4         | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | vect (12.5%)\nADDPD %XMM7,%XMM4            | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | vect (25.0%)\nCVTPD2PS %XMM4,%XMM4         | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | vect (25.0%)\nADD $0x2,%R10                | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nCMP %RDI,%R10                | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nJB 401230 <kernel+0x80>      | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50              | N/A\n"
              }
            ],
          "header":
            [
            "1% of peak computational performance is used (0.43 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try another compiler or update/tune your current one:\n  * recompile with O2 or higher to enable loop vectorization and with ffast-math (included in Ofast) to extend vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "78% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 33% of SSE/AVX loads are used in vector version.\n - 76% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your loop is partially vectorized.\nOnly 20% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your loop, you can lower the cost of an iteration from 14.00 to 10.00 cycles (1.40x speedup)."
              },
              {
                "title": "Execution units bottlenecks",
                "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
              }
            ],
          "potential":
            [

            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "workaround": "Pass to your compiler a micro-architecture specialization option:\n - use march=native\n",
                  "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - CVTPD2PS: 1 occurrences<<list_path_1_complex_1>>\n - CVTPS2PD: 1 occurrences<<list_path_1_complex_2>>\n",
                  "title": "Complex instructions",
                  "txt": "Detected COMPLEX INSTRUCTIONS.\n"
                },
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "details": " - Constant unknown stride: 2 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                  "title": "Slow data structures access",
                  "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written"
                },
                {
                  "workaround": " - Pass to your compiler a micro-architecture specialization option:\n  * use march=native\n - Use vector aligned instructions:\n  1) align your arrays on 64 bytes boundaries: replace { void *p = malloc (size); } with { void *p; posix_memalign (&p, 64, size); }.\n  2) inform your compiler that your arrays are vector aligned: if array 'foo' is 64 bytes-aligned, define a pointer 'p_foo' as __builtin_assume_aligned (foo, 64) and use it instead of 'foo' in the loop.\n<<image_vec_align>>",
                  "details": " - MOVHPD: 1 occurrences<<list_path_1_vec_align_1>>\n",
                  "title": "Vector unaligned load/store instructions",
                  "txt": "Detected 1 suboptimal vector unaligned load/store instructions.\n"
                },
                {
                  "workaround": "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements. Use double instead of single precision only when/where needed by numerical stability and avoid mixing precision. In C/C++, FP constants are double precision by default and must be suffixed by 'f' to make them single precision.",
                  "details": " - CVTPD2PS (FP64 to FP32, SIMD): 1 occurrences<<list_path_1_cvt_1>>\n - CVTPS2PD (FP32 to FP64, SIMD): 2 occurrences<<list_path_1_cvt_2>>\n",
                  "title": "Conversion instructions",
                  "txt": "Detected expensive conversion instructions."
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "3 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in vector mode (two at a time).\n"
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop is composed of 6 FP arithmetical operations:\n - 2: addition or subtraction\n - 2: divide\n - 2: square root\nThe binary loop is loading 24 bytes (3 double precision FP elements)."
                },
                {
                  "title": "Arithmetic intensity",
                  "txt": "Arithmetic intensity is 0.25 FP operations per loaded or stored byte."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 26\nnb uops            : 27\nloop length        : 115\nused x86 registers : 5\nused mmx registers : 0\nused xmm registers : 8\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n"
                },
                {
                  "title": "Front-end",
                  "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 5.40 cycles\nfront end            : 5.40 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9\n----------------------------------------------------------------------------\nuops   | 7.67 | 7.67 | 1.50 | 1.50 | 0.00 | 7.67 | 2.00 | 0.00 | 0.00 | 0.00\ncycles | 7.67 | 7.67 | 1.50 | 1.50 | 0.00 | 7.67 | 2.00 | 0.00 | 0.00 | 0.00\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, BRU, ALU, DIV/SQRT\n - P1 (256 bits): ALU, VPU\n - P2 (512 bits): load\n - P3 (512 bits): load\n - P4 (256 bits): store data\n - P5 (512 bits): ALU, VPU\n - P6: ALU, BRU\n - P7: store address\n - P8: store address\n - P9 (256 bits): store data\n\nCycles executing div or sqrt instructions: 8.50-10.00\nLongest recurrence chain latency (RecMII): 14.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 5.40\nDispatch  : 7.67\nDIV/SQRT  : 8.50-10.00\nData deps.: 14.00\nOverall L1: 14.00\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 80%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : 100%\nadd-sub: 100%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 70%\nFP\nall     : 75%\nload    : 33%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 100%\nother   : 100%\nINT+FP\nall     : 78%\nload    : 33%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 100%\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 100%\nother   : 76%\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "INT\nall    : 20%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : 12%\nadd-sub: 25%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 21%\nFP\nall     : 18%\nload    : 12%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 25%\nother   : 16%\nINT+FP\nall     : 20%\nload    : 12%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 12%\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 25%\nother   : 20%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 14.00 cycles. At this rate:\n - 1% of peak load performance is reached (1.71 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Found no such bottlenecks."
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 401230\n\nInstruction                  | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7 | P8 | P9 | Latency | Recip. throughput | Vectorization\n------------------------------------------------------------------------------------------------------------------------------------------------\nCVTPS2PD (%RDX,%R10,4),%XMM6 | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 5       | 0.50              | vect (12.5%)\nMOVQ %R10,%XMM7              | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nPSHUFD $0x44,%XMM7,%XMM7     | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nSQRTPD %XMM6,%XMM6           | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | vect (25.0%)\nMOVDQA %XMM7,%XMM8           | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.20              | vect (25.0%)\nPOR %XMM2,%XMM8              | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0  | 0  | 0  | 1       | 0.33              | vect (25.0%)\nPSRLQ $0x20,%XMM7            | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nPMULUDQ %XMM1,%XMM8          | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 5       | 0.50              | vect (12.5%)\nPMULUDQ %XMM1,%XMM7          | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 5       | 0.50              | vect (12.5%)\nPSLLQ $0x20,%XMM7            | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nPADDQ %XMM5,%XMM7            | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0  | 0  | 0  | 1       | 0.33              | vect (25.0%)\nPADDQ %XMM8,%XMM7            | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0  | 0  | 0  | 1       | 0.33              | vect (25.0%)\nPSLLQ $0x3,%XMM7             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nPADDQ %XMM3,%XMM7            | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0  | 0  | 0  | 1       | 0.33              | vect (25.0%)\nPSHUFD $-0x12,%XMM7,%XMM8    | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 0  | 0  | 1       | 0.50              | vect (25.0%)\nMOVQ %XMM7,%R11              | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nMOVQ %XMM8,%RBX              | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 1       | 1                 | scal (12.5%)\nMOVSD (%R11),%XMM7           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nMOVHPD (%RBX),%XMM7          | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 1    | 0    | 0  | 0  | 0  | 4       | 1                 | scal (12.5%)\nDIVPD %XMM6,%XMM7            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | vect (25.0%)\nCVTPS2PD %XMM4,%XMM4         | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | vect (12.5%)\nADDPD %XMM7,%XMM4            | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | vect (25.0%)\nCVTPD2PS %XMM4,%XMM4         | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | vect (25.0%)\nADD $0x2,%R10                | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nCMP %RDI,%R10                | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nJB 401230 <kernel+0x80>      | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50              | N/A\n"
                }
              ],
            "header":
              [
              "1% of peak computational performance is used (0.43 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try another compiler or update/tune your current one:\n  * recompile with O2 or higher to enable loop vectorization and with ffast-math (included in Ofast) to extend vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "78% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 33% of SSE/AVX loads are used in vector version.\n - 76% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is partially vectorized.\nOnly 20% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your loop, you can lower the cost of an iteration from 14.00 to 10.00 cycles (1.40x speedup)."
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
                }
              ],
            "potential":
              [

              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The loop is defined in /home/mathieu/Downloads/AOA-Project5/mathieu_icx/../src/kernel.c:166-167.\n",
            "It is main loop of related source loop which is unrolled by 2 (including vectorization)."
            ],
          "nb_paths": 1
        }
    }
}
