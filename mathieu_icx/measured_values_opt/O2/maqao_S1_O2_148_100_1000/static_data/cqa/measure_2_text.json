{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_cvt_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53"
                ],
              "header": ""
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53"
                ],
              "header": ""
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_2":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53"
                ],
              "header": ""
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_cvt_2":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53",
                "/home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:53"
                ],
              "header": ""
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "workaround": "Pass to your compiler a micro-architecture specialization option:\n - use march=native\n",
                "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - CVTSD2SS: 8 occurrences<<list_path_1_complex_1>>\n - CVTSS2SD: 16 occurrences<<list_path_1_complex_2>>\n",
                "title": "Complex instructions",
                "txt": "Detected COMPLEX INSTRUCTIONS.\n"
              },
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "details": " - Constant unknown stride: 2 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                "title": "Slow data structures access",
                "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written"
              },
              {
                "workaround": "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements. Use double instead of single precision only when/where needed by numerical stability and avoid mixing precision. In C/C++, FP constants are double precision by default and must be suffixed by 'f' to make them single precision.",
                "details": " - CVTSD2SS (FP64 to FP32, scalar): 8 occurrences<<list_path_1_cvt_1>>\n - CVTSS2SD (FP32 to FP64, scalar): 16 occurrences<<list_path_1_cvt_2>>\n",
                "title": "Conversion instructions",
                "txt": "Detected expensive conversion instructions."
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "24 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n"
              },
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop is composed of 24 FP arithmetical operations:\n - 8: addition or subtraction\n - 8: divide\n - 8: square root\nThe binary loop is loading 96 bytes (12 double precision FP elements)."
              },
              {
                "title": "Arithmetic intensity",
                "txt": "Arithmetic intensity is 0.25 FP operations per loaded or stored byte."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 75\nnb uops            : 98\nloop length        : 332\nused x86 registers : 7\nused mmx registers : 0\nused xmm registers : 4\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n"
              },
              {
                "title": "Front-end",
                "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 19.60 cycles\nfront end            : 19.60 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | P0    | P1    | P2   | P3   | P4   | P5    | P6   | P7   | P8   | P9\n-------------------------------------------------------------------------------\nuops   | 24.00 | 24.00 | 8.00 | 8.00 | 0.00 | 24.00 | 9.00 | 0.00 | 0.00 | 0.00\ncycles | 24.00 | 24.00 | 8.00 | 8.00 | 0.00 | 24.00 | 9.00 | 0.00 | 0.00 | 0.00\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, BRU, ALU, DIV/SQRT\n - P1 (256 bits): ALU, VPU\n - P2 (512 bits): load\n - P3 (512 bits): load\n - P4 (256 bits): store data\n - P5 (512 bits): ALU, VPU\n - P6: ALU, BRU\n - P7: store address\n - P8: store address\n - P9 (256 bits): store data\n\nCycles executing div or sqrt instructions: 68.00-80.00\nLongest recurrence chain latency (RecMII): 0.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 19.60\nDispatch  : 24.00\nDIV/SQRT  : 68.00-80.00\nData deps.: 0.00\nOverall L1: 68.00-80.00\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "all     : 1%\nload    : 0%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 4%\n"
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "all     : 10%\nload    : 9%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 12%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 12%\nother   : 9%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 80.00 cycles. At this rate:\n - 0% of peak load performance is reached (1.20 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Found no such bottlenecks."
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the loop is: 401230\n\nInstruction                   | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7 | P8 | P9 | Latency | Recip. throughput | Vectorization\n-------------------------------------------------------------------------------------------------------------------------------------------------\nMOVSS (%RDX,%R12,1),%XMM1     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nMOVSS 0x4(%RDX,%R12,1),%XMM2  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R15),%XMM3            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nDIVSD %XMM1,%XMM3             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM3,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nXORPS %XMM1,%XMM1             | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25              | vect (25.0%)\nCVTSS2SD %XMM2,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R15,%R9,1),%XMM2      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nDIVSD %XMM1,%XMM2             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM2,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nLEA (%R15,%R9,1),%R13         | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nMOVSS 0x8(%RDX,%R12,1),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R9,%R13,1),%XMM2      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nADD %R9,%R13                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nDIVSD %XMM1,%XMM2             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM2,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nMOVSS 0xc(%RDX,%R12,1),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R9,%R13,1),%XMM2      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nDIVSD %XMM1,%XMM2             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM2,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nADD %R9,%R13                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nMOVSS 0x10(%RDX,%R12,1),%XMM1 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R9,%R13,1),%XMM2      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nADD %R9,%R13                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nDIVSD %XMM1,%XMM2             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM2,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nMOVSS 0x14(%RDX,%R12,1),%XMM1 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R9,%R13,1),%XMM2      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nDIVSD %XMM1,%XMM2             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM2,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nADD %R9,%R13                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nMOVSS 0x18(%RDX,%R12,1),%XMM1 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R9,%R13,1),%XMM2      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nADD %R9,%R13                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nDIVSD %XMM1,%XMM2             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM2,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nMOVSS 0x1c(%RDX,%R12,1),%XMM1 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R9,%R13,1),%XMM2      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nDIVSD %XMM1,%XMM2             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM2,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nADD $0x20,%R12                | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nADD %RBX,%R15                 | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nCMP %R12,%R11                 | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nJNE 401230 <kernel+0x80>      | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\n"
              }
            ],
          "header":
            [
            "0% of peak computational performance is used (0.30 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try another compiler or update/tune your current one:\n  * recompile with O2 or higher to enable loop vectorization and with ffast-math (included in Ofast) to extend vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your loop is probably not vectorized.\nOnly 10% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 80.00 to 40.00 cycles (2.00x speedup)."
              },
              {
                "workaround": " - Reduce the number of division or square root instructions:\n  * If denominator is constant over iterations, use reciprocal (replace x/y with x*(1/y)). Check precision impact. This will be done by your compiler with ffast-math or Ofast\n - Check whether you really need double precision. If not, switch to single precision to speedup execution\n",
                "title": "Execution units bottlenecks",
                "txt": "Performance is limited by execution of divide and square root operations (the divide/square root unit is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 80.00 to 24.00 cycles (3.33x speedup).\n"
              }
            ],
          "potential":
            [
              {
                "title": "Expensive FP math instructions/calls",
                "txt": "Detected performance impact from expensive FP math instructions/calls.\nBy removing/reexpressing them, you can lower the cost of an iteration from 80.00 to 24.00 cycles (3.33x speedup)."
              }
            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "workaround": "Pass to your compiler a micro-architecture specialization option:\n - use march=native\n",
                  "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - CVTSD2SS: 8 occurrences<<list_path_1_complex_1>>\n - CVTSS2SD: 16 occurrences<<list_path_1_complex_2>>\n",
                  "title": "Complex instructions",
                  "txt": "Detected COMPLEX INSTRUCTIONS.\n"
                },
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "details": " - Constant unknown stride: 2 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                  "title": "Slow data structures access",
                  "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written"
                },
                {
                  "workaround": "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements. Use double instead of single precision only when/where needed by numerical stability and avoid mixing precision. In C/C++, FP constants are double precision by default and must be suffixed by 'f' to make them single precision.",
                  "details": " - CVTSD2SS (FP64 to FP32, scalar): 8 occurrences<<list_path_1_cvt_1>>\n - CVTSS2SD (FP32 to FP64, scalar): 16 occurrences<<list_path_1_cvt_2>>\n",
                  "title": "Conversion instructions",
                  "txt": "Detected expensive conversion instructions."
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "24 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n"
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop is composed of 24 FP arithmetical operations:\n - 8: addition or subtraction\n - 8: divide\n - 8: square root\nThe binary loop is loading 96 bytes (12 double precision FP elements)."
                },
                {
                  "title": "Arithmetic intensity",
                  "txt": "Arithmetic intensity is 0.25 FP operations per loaded or stored byte."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 75\nnb uops            : 98\nloop length        : 332\nused x86 registers : 7\nused mmx registers : 0\nused xmm registers : 4\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n"
                },
                {
                  "title": "Front-end",
                  "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 19.60 cycles\nfront end            : 19.60 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | P0    | P1    | P2   | P3   | P4   | P5    | P6   | P7   | P8   | P9\n-------------------------------------------------------------------------------\nuops   | 24.00 | 24.00 | 8.00 | 8.00 | 0.00 | 24.00 | 9.00 | 0.00 | 0.00 | 0.00\ncycles | 24.00 | 24.00 | 8.00 | 8.00 | 0.00 | 24.00 | 9.00 | 0.00 | 0.00 | 0.00\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, BRU, ALU, DIV/SQRT\n - P1 (256 bits): ALU, VPU\n - P2 (512 bits): load\n - P3 (512 bits): load\n - P4 (256 bits): store data\n - P5 (512 bits): ALU, VPU\n - P6: ALU, BRU\n - P7: store address\n - P8: store address\n - P9 (256 bits): store data\n\nCycles executing div or sqrt instructions: 68.00-80.00\nLongest recurrence chain latency (RecMII): 0.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 19.60\nDispatch  : 24.00\nDIV/SQRT  : 68.00-80.00\nData deps.: 0.00\nOverall L1: 68.00-80.00\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "all     : 1%\nload    : 0%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 4%\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "all     : 10%\nload    : 9%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 12%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 12%\nother   : 9%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 80.00 cycles. At this rate:\n - 0% of peak load performance is reached (1.20 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Found no such bottlenecks."
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 401230\n\nInstruction                   | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7 | P8 | P9 | Latency | Recip. throughput | Vectorization\n-------------------------------------------------------------------------------------------------------------------------------------------------\nMOVSS (%RDX,%R12,1),%XMM1     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nMOVSS 0x4(%RDX,%R12,1),%XMM2  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R15),%XMM3            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nDIVSD %XMM1,%XMM3             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM3,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nXORPS %XMM1,%XMM1             | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25              | vect (25.0%)\nCVTSS2SD %XMM2,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R15,%R9,1),%XMM2      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nDIVSD %XMM1,%XMM2             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM2,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nLEA (%R15,%R9,1),%R13         | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nMOVSS 0x8(%RDX,%R12,1),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R9,%R13,1),%XMM2      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nADD %R9,%R13                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nDIVSD %XMM1,%XMM2             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM2,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nMOVSS 0xc(%RDX,%R12,1),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R9,%R13,1),%XMM2      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nDIVSD %XMM1,%XMM2             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM2,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nADD %R9,%R13                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nMOVSS 0x10(%RDX,%R12,1),%XMM1 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R9,%R13,1),%XMM2      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nADD %R9,%R13                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nDIVSD %XMM1,%XMM2             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM2,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nMOVSS 0x14(%RDX,%R12,1),%XMM1 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R9,%R13,1),%XMM2      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nDIVSD %XMM1,%XMM2             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM2,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nADD %R9,%R13                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nMOVSS 0x18(%RDX,%R12,1),%XMM1 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R9,%R13,1),%XMM2      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nADD %R9,%R13                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nDIVSD %XMM1,%XMM2             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM2,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nMOVSS 0x1c(%RDX,%R12,1),%XMM1 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (6.3%)\nCVTSS2SD %XMM1,%XMM1          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nSQRTSD %XMM1,%XMM1            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-19   | 4.50-6            | scal (12.5%)\nMOVSD (%R9,%R13,1),%XMM2      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4-7     | 0.50              | scal (12.5%)\nDIVSD %XMM1,%XMM2             | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 13-15   | 4                 | scal (12.5%)\nCVTSS2SD %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (6.3%)\nADDSD %XMM2,%XMM0             | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 0.50              | scal (12.5%)\nCVTSD2SS %XMM0,%XMM0          | 2     | 0.50 | 0.50 | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 5       | 1                 | scal (12.5%)\nADD $0x20,%R12                | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nADD %RBX,%R15                 | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nCMP %R12,%R11                 | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25              | N/A\nJNE 401230 <kernel+0x80>      | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1            | N/A\n"
                }
              ],
            "header":
              [
              "0% of peak computational performance is used (0.30 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try another compiler or update/tune your current one:\n  * recompile with O2 or higher to enable loop vectorization and with ffast-math (included in Ofast) to extend vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is probably not vectorized.\nOnly 10% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 80.00 to 40.00 cycles (2.00x speedup)."
                },
                {
                  "workaround": " - Reduce the number of division or square root instructions:\n  * If denominator is constant over iterations, use reciprocal (replace x/y with x*(1/y)). Check precision impact. This will be done by your compiler with ffast-math or Ofast\n - Check whether you really need double precision. If not, switch to single precision to speedup execution\n",
                  "title": "Execution units bottlenecks",
                  "txt": "Performance is limited by execution of divide and square root operations (the divide/square root unit is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 80.00 to 24.00 cycles (3.33x speedup).\n"
                }
              ],
            "potential":
              [
                {
                  "title": "Expensive FP math instructions/calls",
                  "txt": "Detected performance impact from expensive FP math instructions/calls.\nBy removing/reexpressing them, you can lower the cost of an iteration from 80.00 to 24.00 cycles (3.33x speedup)."
                }
              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The loop is defined in /home/mathieu/Downloads/AOA-Project5/mathieu/../kernel.c:52-53.\n",
            "It is main loop of related source loop which is unrolled by 8 (including vectorization)."
            ],
          "nb_paths": 1
        }
    }
}
