{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/linuxbox/AOA-Project5/driver.c:95",
                "/home/linuxbox/AOA-Project5/driver.c:97"
                ],
              "header": ""
            },
          "list_path_1_call_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:79"
                ],
              "header": ""
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_call_2":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/usr/include/stdlib.h:483",
                "/usr/include/stdlib.h:483",
                "/usr/include/stdlib.h:483",
                "/home/linuxbox/AOA-Project5/driver.c:89",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:86",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:86",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:86",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:86",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:86",
                "/home/linuxbox/AOA-Project5/driver.c:103"
                ],
              "header": ""
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_2":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/linuxbox/AOA-Project5/driver.c:91",
                "/home/linuxbox/AOA-Project5/driver.c:91",
                "/home/linuxbox/AOA-Project5/driver.c:93",
                "/home/linuxbox/AOA-Project5/driver.c:94",
                "/home/linuxbox/AOA-Project5/driver.c:94",
                "/home/linuxbox/AOA-Project5/driver.c:91",
                "/home/linuxbox/AOA-Project5/driver.c:94",
                "/home/linuxbox/AOA-Project5/driver.c:94",
                "/home/linuxbox/AOA-Project5/driver.c:93"
                ],
              "header": ""
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_cvt_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/linuxbox/AOA-Project5/driver.c:91",
                "/home/linuxbox/AOA-Project5/driver.c:91",
                "/home/linuxbox/AOA-Project5/driver.c:93",
                "/home/linuxbox/AOA-Project5/driver.c:94",
                "/home/linuxbox/AOA-Project5/driver.c:94",
                "/home/linuxbox/AOA-Project5/driver.c:91",
                "/home/linuxbox/AOA-Project5/driver.c:94",
                "/home/linuxbox/AOA-Project5/driver.c:94",
                "/home/linuxbox/AOA-Project5/driver.c:93"
                ],
              "header": ""
            },
          "list_path_1_cvt_2":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/linuxbox/AOA-Project5/driver.c:90",
                "/home/linuxbox/AOA-Project5/driver.c:92",
                "/home/linuxbox/AOA-Project5/driver.c:96",
                "/home/linuxbox/AOA-Project5/driver.c:96"
                ],
              "header": ""
            },
          "list_path_1_complex_3":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/linuxbox/AOA-Project5/driver.c:90",
                "/home/linuxbox/AOA-Project5/driver.c:92",
                "/home/linuxbox/AOA-Project5/driver.c:96",
                "/home/linuxbox/AOA-Project5/driver.c:96"
                ],
              "header": ""
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - .plt.sec@start: 1 occurrences<<list_path_1_call_1>>\n - unknown: 10 occurrences<<list_path_1_call_2>>\n",
                "title": "CALL instructions",
                "txt": "Detected function call instructions.\n"
              },
              {
                "workaround": "Recompile with march=core-avx2.\nCQA target is Core_4x_Xeon_E3_v3_other (4th Generation Intel Core processor and Intel Xeon processor E3-1200 v3 product family based on Haswell microarchitecture) but specialization flags are -march=x86-64",
                "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - COMISS: 2 occurrences<<list_path_1_complex_1>>\n - CVTSI2SS: 9 occurrences<<list_path_1_complex_2>>\n - CVTSS2SD: 4 occurrences<<list_path_1_complex_3>>\n",
                "title": "Complex instructions",
                "txt": "Detected COMPLEX INSTRUCTIONS.\n"
              },
              {
                "workaround": "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements. Use double instead of single precision only when/where needed by numerical stability and avoid mixing precision. In C/C++, FP constants are double precision by default and must be suffixed by 'f' to make them single precision. Usual math.h functions are double precision and their name needs to be suffixed with 'f' to use their single precision version which is faster and avoids type conversion. For instance, on single precision elements, call expf instead of exp.",
                "details": " - CVTSI2SS (INT32/64 to FP32, scalar): 9 occurrences<<list_path_1_cvt_1>>\n - CVTSS2SD (FP32 to FP64, scalar): 4 occurrences<<list_path_1_cvt_2>>\n",
                "title": "Conversion instructions",
                "txt": "Detected expensive conversion instructions."
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "10 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n"
              },
              {
                "title": "Matching between your function (in the source code) and the binary function",
                "txt": "The binary function is composed of 8 FP arithmetical operations:\n - 4: addition or subtraction\n - 1: multiply\n - 3: divide\nThe binary function is loading 132 bytes (33 single precision FP elements).\nThe binary function is storing 100 bytes (25 single precision FP elements)."
              },
              {
                "title": "Arithmetic intensity",
                "txt": "Arithmetic intensity is 0.03 FP operations per loaded or stored byte."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 185\nnb uops            : 219\nloop length        : 820\nused x86 registers : 13\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 18\nADD-SUB / MUL ratio: 4.00\n"
              },
              {
                "title": "Front-end",
                "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 54.75 cycles\nfront end            : 54.75 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | P0    | P1    | P2    | P3    | P4    | P5    | P6    | P7\n----------------------------------------------------------------------\nuops   | 31.75 | 31.75 | 19.50 | 19.17 | 32.00 | 31.75 | 31.75 | 19.33\ncycles | 31.75 | 31.75 | 19.50 | 19.17 | 32.00 | 31.75 | 31.75 | 19.33\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, DIV/SQRT, ALU, BRU\n - P1 (256 bits): ALU, VPU\n - P2 (256 bits): store address, load\n - P3 (256 bits): store address, load\n - P4 (256 bits): store data\n - P5 (256 bits): ALU\n - P6: ALU, BRU\n - P7: store address\n\nCycles executing div or sqrt instructions: 21.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 54.75\nDispatch  : 32.00\nDIV/SQRT  : 21.00\nOverall L1: 54.75\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 14%\nload   : 0%\nstore  : 0%\nmul    : 0%\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 25%\nFP\nall     : 5%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 14%\nINT+FP\nall     : 13%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 23%\n"
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "INT\nall    : 24%\nload   : 23%\nstore  : 21%\nmul    : 12%\nadd-sub: 25%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 26%\nFP\nall     : 14%\nload    : 12%\nstore   : 12%\nmul     : 12%\nadd-sub : 12%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 12%\nother   : 17%\nINT+FP\nall     : 22%\nload    : 20%\nstore   : 20%\nmul     : 12%\nadd-sub : 17%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 12%\nother   : 25%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each call to the function takes 54.75 cycles. At this rate:\n - 3% of peak load performance is reached (2.41 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 5% of peak store performance is reached (1.83 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 54.75 to 32.00 cycles (1.71x speedup).\n"
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the function is: 1180\n\nInstruction                     | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7   | Latency | Recip. throughput | Vectorization\n-------------------------------------------------------------------------------------------------------------------------------------------\nENDBR64                         |       |      |      |      |      |    |      |      |      |         |                   | N/A\nPUSH %R15                       | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | N/A\nPUSH %R14                       | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | N/A\nPUSH %R13                       | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | N/A\nPUSH %R12                       | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | N/A\nPUSH %RBP                       | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | N/A\nMOV %RSI,%RBP                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nPUSH %RBX                       | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | N/A\nSUB $0x178,%RSP                 | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nMOV %FS:0x28,%RAX               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nMOV %RAX,0x168(%RSP)            | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nXOR %EAX,%EAX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nCMP $0x4,%EDI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nJE 11f9 <main+0x79>             | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1            | N/A\nMOV (%RSI),%RCX                 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nMOV 0x2e66(%RIP),%RDI           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nLEA 0xe57(%RIP),%RDX            | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOV $0x2,%ESI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nCALL 1150 <.plt.sec@start+0x70> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nMOV $0x1,%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nMOV 0x168(%RSP),%RDX            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nSUB %FS:0x28,%RDX               | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0    | 1       | 0.50              | scal (25.0%)\nJNE 16fd <main+0x57d>           | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1            | N/A\nADD $0x178,%RSP                 | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nPOP %RBX                        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nPOP %RBP                        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nPOP %R12                        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nPOP %R13                        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nPOP %R14                        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nPOP %R15                        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nRET                             | 1     | 0    | 0    | 0.33 | 0.33 | 0  | 0    | 1    | 0.33 | 0       | 1                 | N/A\nMOV 0x8(%RSI),%RDI              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nMOV $0xa,%EDX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nXOR %ESI,%ESI                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV $-0x8,%R14                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nCALL 1120 <.plt.sec@start+0x40> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nMOV 0x10(%RBP),%RDI             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nMOV $0xa,%EDX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nXOR %ESI,%ESI                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV %RAX,%RBX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV %EAX,0x18(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (12.5%)\nMOV %EAX,%R12D                  | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | scal (12.5%)\nCALL 1120 <.plt.sec@start+0x40> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nMOV %EBX,%R13D                  | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | scal (12.5%)\nMOV 0x18(%RBP),%RDI             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nXOR %ESI,%ESI                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nIMUL %EBX,%R13D                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0    | 3       | 1                 | scal (12.5%)\nMOV $0xa,%EDX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nMOV %EAX,0x68(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (12.5%)\nCALL 1120 <.plt.sec@start+0x40> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nLEA -0x1(%RBX),%ESI             | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nXOR %R8D,%R8D                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | scal (12.5%)\nLEA 0x70(%RSP),%RDI             | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOV %RAX,%RBP                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV %EAX,0xc(%RSP)              | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (12.5%)\nMOV %R13D,%ECX                  | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV %R8,(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nLEA (,%RCX,8),%RAX              | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOV %EBX,%ECX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV %RBP,0x60(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nMOV %RAX,0x30(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nLEA (,%RCX,4),%RAX              | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOVSXD %EBX,%RCX                | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nMOV %RAX,0x38(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nLEA (,%RCX,8),%RAX              | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nLEA (,%RSI,8),%RCX              | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nSUB %RCX,%R14                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (25.0%)\nMOV %RAX,0x40(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nMOV %R14,0x48(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nMOV %R13D,0x6c(%RSP)            | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (12.5%)\nMOV %RSI,0x58(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nMOV %RCX,0x50(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nMOV %RDI,0x10(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nNOPL (%RAX,%RAX,1)              | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV 0x6c(%RSP),%R13D            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (12.5%)\nMOV 0x60(%RSP),%RBP             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nMOV $0x8,%EDX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nLEA 0x477(%RIP),%RCX            | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOV 0x10(%RSP),%RDI             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nMOV $0x1f,%ESI                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nMOV %R13D,%EBX                  | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nCALL 10f0 <.plt.sec@start+0x10> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nIMUL %EBP,%EBX                  | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0    | 3       | 1                 | N/A\nMOV 0x70(%RSP),%RDX             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nPXOR %XMM1,%XMM1                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nMOV %EBX,%EAX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nCVTSI2SS %RAX,%XMM1             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nTEST %RDX,%RDX                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (25.0%)\nJS 1641 <main+0x4c1>            | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1            | N/A\nPXOR %XMM0,%XMM0                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nCVTSI2SS %RDX,%XMM0             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nDIVSS %XMM1,%XMM0               | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 10-13   | 7                 | scal (12.5%)\nMOV $0x2,%EDI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nMOVSS %XMM1,(%RSP)              | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (12.5%)\nLEA 0xb9e(%RIP),%RSI            | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nCVTSS2SD %XMM0,%XMM0            | 2     | 1    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 2       | 1                 | scal (12.5%)\nCALL 1140 <.plt.sec@start+0x60> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nMOVSS (%RSP),%XMM1              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 0       | 0.50              | scal (12.5%)\nMOV 0xe8(%RSP),%RDX             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nTEST %RDX,%RDX                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (25.0%)\nJS 169e <main+0x51e>            | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1            | N/A\nPXOR %XMM0,%XMM0                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nCVTSI2SS %RDX,%XMM0             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nDIVSS %XMM1,%XMM0               | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 10-13   | 7                 | scal (12.5%)\nMOV $0x2,%EDI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nLEA 0xb91(%RIP),%RSI            | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nCVTSS2SD %XMM0,%XMM0            | 2     | 1    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 2       | 1                 | scal (12.5%)\nCALL 1140 <.plt.sec@start+0x60> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nMOV 0x70(%RSP),%RAX             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nMOV 0xe8(%RSP),%RDX             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nSUB %RAX,%RDX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (25.0%)\nJS 1680 <main+0x500>            | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1            | N/A\nPXOR %XMM0,%XMM0                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nCVTSI2SS %RDX,%XMM0             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nMULSS 0xae1(%RIP),%XMM0         | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50              | scal (12.5%)\nTEST %RAX,%RAX                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nJS 1662 <main+0x4e2>            | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1            | N/A\nPXOR %XMM1,%XMM1                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nCVTSI2SS %RAX,%XMM1             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nDIVSS %XMM1,%XMM0               | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 10-13   | 7                 | scal (12.5%)\nCOMISS 0xac8(%RIP),%XMM0        | 2     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 1                 | scal (12.5%)\nJAE 16dc <main+0x55c>           | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1            | N/A\nCOMISS 0xabf(%RIP),%XMM0        | 2     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 1                 | scal (12.5%)\nPXOR %XMM1,%XMM1                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nCVTSS2SD %XMM0,%XMM1            | 2     | 1    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 2       | 1                 | scal (12.5%)\nMOVAPD %XMM1,%XMM0              | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nJB 16bf <main+0x53f>            | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50              | N/A\nLEA 0xbb2(%RIP),%RSI            | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOV $0x2,%EDI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nCALL 1140 <.plt.sec@start+0x60> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nXOR %EAX,%EAX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nJMP 11d0 <main+0x50>            | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0    | 0       | 1-2               | N/A\nMOV %RDX,%RAX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV %RDX,%RCX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nPXOR %XMM0,%XMM0                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nSHR $0x1,%RAX                   | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 1       | 0.50              | N/A\nAND $0x1,%ECX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nOR %RCX,%RAX                    | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nCVTSI2SS %RAX,%XMM0             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nADDSS %XMM0,%XMM0               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0    | 3       | 1                 | scal (12.5%)\nJMP 14a0 <main+0x320>           | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0    | 0       | 1-2               | N/A\nMOV %RAX,%RDX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | scal (25.0%)\nAND $0x1,%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nPXOR %XMM1,%XMM1                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nSHR $0x1,%RDX                   | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nOR %RAX,%RDX                    | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (25.0%)\nCVTSI2SS %RDX,%XMM1             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nADDSS %XMM1,%XMM1               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0    | 3       | 1                 | scal (12.5%)\nJMP 1539 <main+0x3b9>           | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0    | 0       | 1-2               | N/A\nMOV %RDX,%RCX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nAND $0x1,%EDX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nPXOR %XMM0,%XMM0                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nSHR $0x1,%RCX                   | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 1       | 0.50              | N/A\nOR %RDX,%RCX                    | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nCVTSI2SS %RCX,%XMM0             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nADDSS %XMM0,%XMM0               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0    | 3       | 1                 | scal (12.5%)\nJMP 151f <main+0x39f>           | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0    | 0       | 1-2               | N/A\nMOV %RDX,%RAX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV %RDX,%RCX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nPXOR %XMM0,%XMM0                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nSHR $0x1,%RAX                   | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 1       | 0.50              | N/A\nAND $0x1,%ECX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nOR %RCX,%RAX                    | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nCVTSI2SS %RAX,%XMM0             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nADDSS %XMM0,%XMM0               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0    | 3       | 1                 | scal (12.5%)\nJMP 14e2 <main+0x362>           | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0    | 0       | 1-2               | N/A\nLEA 0xa72(%RIP),%RSI            | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOV $0x2,%EDI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nCALL 1140 <.plt.sec@start+0x60> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nXOR %EAX,%EAX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nJMP 11d0 <main+0x50>            | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0    | 0       | 1-2               | N/A\nLEA 0xa21(%RIP),%RSI            | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOV $0x2,%EDI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nCVTSS2SD %XMM0,%XMM0            | 2     | 1    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 2       | 1                 | scal (12.5%)\nCALL 1140 <.plt.sec@start+0x60> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nXOR %EAX,%EAX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nJMP 11d0 <main+0x50>            | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0    | 0       | 1-2               | N/A\nCALL 1100 <.plt.sec@start+0x20> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nNOPW %CS:(%RAX,%RAX,1)          | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nNOPL (%RAX)                     | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\n"
              }
            ],
          "header":
            [
            "Warnings:\n - The number of fused uops of the instruction [ENDBR64] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
            "0% of peak computational performance is used (0.15 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "title": "Code clean check",
                "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 54.75 to 22.00 cycles (2.49x speedup)."
              },
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your function is probably not vectorized.\nOnly 22% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 54.75 to 8.14 cycles (6.73x speedup)."
              },
              {
                "title": "Execution units bottlenecks",
                "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
              }
            ],
          "potential":
            [
              {
                "workaround": " - Recompile with march=core-avx2.\nCQA target is Core_4x_Xeon_E3_v3_other (4th Generation Intel Core processor and Intel Xeon processor E3-1200 v3 product family based on Haswell microarchitecture) but specialization flags are -march=x86-64\n - Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).\n",
                "title": "FMA",
                "txt": "Presence of both ADD/SUB and MUL operations."
              }
            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - .plt.sec@start: 1 occurrences<<list_path_1_call_1>>\n - unknown: 10 occurrences<<list_path_1_call_2>>\n",
                  "title": "CALL instructions",
                  "txt": "Detected function call instructions.\n"
                },
                {
                  "workaround": "Recompile with march=core-avx2.\nCQA target is Core_4x_Xeon_E3_v3_other (4th Generation Intel Core processor and Intel Xeon processor E3-1200 v3 product family based on Haswell microarchitecture) but specialization flags are -march=x86-64",
                  "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - COMISS: 2 occurrences<<list_path_1_complex_1>>\n - CVTSI2SS: 9 occurrences<<list_path_1_complex_2>>\n - CVTSS2SD: 4 occurrences<<list_path_1_complex_3>>\n",
                  "title": "Complex instructions",
                  "txt": "Detected COMPLEX INSTRUCTIONS.\n"
                },
                {
                  "workaround": "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements. Use double instead of single precision only when/where needed by numerical stability and avoid mixing precision. In C/C++, FP constants are double precision by default and must be suffixed by 'f' to make them single precision. Usual math.h functions are double precision and their name needs to be suffixed with 'f' to use their single precision version which is faster and avoids type conversion. For instance, on single precision elements, call expf instead of exp.",
                  "details": " - CVTSI2SS (INT32/64 to FP32, scalar): 9 occurrences<<list_path_1_cvt_1>>\n - CVTSS2SD (FP32 to FP64, scalar): 4 occurrences<<list_path_1_cvt_2>>\n",
                  "title": "Conversion instructions",
                  "txt": "Detected expensive conversion instructions."
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "10 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n"
                },
                {
                  "title": "Matching between your function (in the source code) and the binary function",
                  "txt": "The binary function is composed of 8 FP arithmetical operations:\n - 4: addition or subtraction\n - 1: multiply\n - 3: divide\nThe binary function is loading 132 bytes (33 single precision FP elements).\nThe binary function is storing 100 bytes (25 single precision FP elements)."
                },
                {
                  "title": "Arithmetic intensity",
                  "txt": "Arithmetic intensity is 0.03 FP operations per loaded or stored byte."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 185\nnb uops            : 219\nloop length        : 820\nused x86 registers : 13\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 18\nADD-SUB / MUL ratio: 4.00\n"
                },
                {
                  "title": "Front-end",
                  "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 54.75 cycles\nfront end            : 54.75 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | P0    | P1    | P2    | P3    | P4    | P5    | P6    | P7\n----------------------------------------------------------------------\nuops   | 31.75 | 31.75 | 19.50 | 19.17 | 32.00 | 31.75 | 31.75 | 19.33\ncycles | 31.75 | 31.75 | 19.50 | 19.17 | 32.00 | 31.75 | 31.75 | 19.33\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, DIV/SQRT, ALU, BRU\n - P1 (256 bits): ALU, VPU\n - P2 (256 bits): store address, load\n - P3 (256 bits): store address, load\n - P4 (256 bits): store data\n - P5 (256 bits): ALU\n - P6: ALU, BRU\n - P7: store address\n\nCycles executing div or sqrt instructions: 21.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 54.75\nDispatch  : 32.00\nDIV/SQRT  : 21.00\nOverall L1: 54.75\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 14%\nload   : 0%\nstore  : 0%\nmul    : 0%\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 25%\nFP\nall     : 5%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 14%\nINT+FP\nall     : 13%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 0%\nother   : 23%\n"
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "INT\nall    : 24%\nload   : 23%\nstore  : 21%\nmul    : 12%\nadd-sub: 25%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 26%\nFP\nall     : 14%\nload    : 12%\nstore   : 12%\nmul     : 12%\nadd-sub : 12%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 12%\nother   : 17%\nINT+FP\nall     : 22%\nload    : 20%\nstore   : 20%\nmul     : 12%\nadd-sub : 17%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: 12%\nother   : 25%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each call to the function takes 54.75 cycles. At this rate:\n - 3% of peak load performance is reached (2.41 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 5% of peak store performance is reached (1.83 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 54.75 to 32.00 cycles (1.71x speedup).\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the function is: 1180\n\nInstruction                     | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7   | Latency | Recip. throughput | Vectorization\n-------------------------------------------------------------------------------------------------------------------------------------------\nENDBR64                         |       |      |      |      |      |    |      |      |      |         |                   | N/A\nPUSH %R15                       | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | N/A\nPUSH %R14                       | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | N/A\nPUSH %R13                       | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | N/A\nPUSH %R12                       | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | N/A\nPUSH %RBP                       | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | N/A\nMOV %RSI,%RBP                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nPUSH %RBX                       | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | N/A\nSUB $0x178,%RSP                 | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nMOV %FS:0x28,%RAX               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nMOV %RAX,0x168(%RSP)            | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nXOR %EAX,%EAX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nCMP $0x4,%EDI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nJE 11f9 <main+0x79>             | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1            | N/A\nMOV (%RSI),%RCX                 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nMOV 0x2e66(%RIP),%RDI           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nLEA 0xe57(%RIP),%RDX            | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOV $0x2,%ESI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nCALL 1150 <.plt.sec@start+0x70> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nMOV $0x1,%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nMOV 0x168(%RSP),%RDX            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nSUB %FS:0x28,%RDX               | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0    | 1       | 0.50              | scal (25.0%)\nJNE 16fd <main+0x57d>           | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1            | N/A\nADD $0x178,%RSP                 | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nPOP %RBX                        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nPOP %RBP                        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nPOP %R12                        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nPOP %R13                        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nPOP %R14                        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nPOP %R15                        | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nRET                             | 1     | 0    | 0    | 0.33 | 0.33 | 0  | 0    | 1    | 0.33 | 0       | 1                 | N/A\nMOV 0x8(%RSI),%RDI              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nMOV $0xa,%EDX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nXOR %ESI,%ESI                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV $-0x8,%R14                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nCALL 1120 <.plt.sec@start+0x40> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nMOV 0x10(%RBP),%RDI             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nMOV $0xa,%EDX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nXOR %ESI,%ESI                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV %RAX,%RBX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV %EAX,0x18(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (12.5%)\nMOV %EAX,%R12D                  | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | scal (12.5%)\nCALL 1120 <.plt.sec@start+0x40> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nMOV %EBX,%R13D                  | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | scal (12.5%)\nMOV 0x18(%RBP),%RDI             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nXOR %ESI,%ESI                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nIMUL %EBX,%R13D                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0    | 3       | 1                 | scal (12.5%)\nMOV $0xa,%EDX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nMOV %EAX,0x68(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (12.5%)\nCALL 1120 <.plt.sec@start+0x40> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nLEA -0x1(%RBX),%ESI             | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nXOR %R8D,%R8D                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | scal (12.5%)\nLEA 0x70(%RSP),%RDI             | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOV %RAX,%RBP                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV %EAX,0xc(%RSP)              | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (12.5%)\nMOV %R13D,%ECX                  | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV %R8,(%RSP)                  | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nLEA (,%RCX,8),%RAX              | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOV %EBX,%ECX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV %RBP,0x60(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nMOV %RAX,0x30(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nLEA (,%RCX,4),%RAX              | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOVSXD %EBX,%RCX                | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nMOV %RAX,0x38(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nLEA (,%RCX,8),%RAX              | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nLEA (,%RSI,8),%RCX              | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nSUB %RCX,%R14                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (25.0%)\nMOV %RAX,0x40(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nMOV %R14,0x48(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nMOV %R13D,0x6c(%RSP)            | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (12.5%)\nMOV %RSI,0x58(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nMOV %RCX,0x50(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nMOV %RDI,0x10(%RSP)             | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (25.0%)\nNOPL (%RAX,%RAX,1)              | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV 0x6c(%RSP),%R13D            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (12.5%)\nMOV 0x60(%RSP),%RBP             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nMOV $0x8,%EDX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nLEA 0x477(%RIP),%RCX            | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOV 0x10(%RSP),%RDI             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nMOV $0x1f,%ESI                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nMOV %R13D,%EBX                  | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nCALL 10f0 <.plt.sec@start+0x10> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nIMUL %EBP,%EBX                  | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0    | 3       | 1                 | N/A\nMOV 0x70(%RSP),%RDX             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nPXOR %XMM1,%XMM1                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nMOV %EBX,%EAX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nCVTSI2SS %RAX,%XMM1             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nTEST %RDX,%RDX                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (25.0%)\nJS 1641 <main+0x4c1>            | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1            | N/A\nPXOR %XMM0,%XMM0                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nCVTSI2SS %RDX,%XMM0             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nDIVSS %XMM1,%XMM0               | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 10-13   | 7                 | scal (12.5%)\nMOV $0x2,%EDI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nMOVSS %XMM1,(%RSP)              | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 0    | 0.33 | 3       | 1                 | scal (12.5%)\nLEA 0xb9e(%RIP),%RSI            | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nCVTSS2SD %XMM0,%XMM0            | 2     | 1    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 2       | 1                 | scal (12.5%)\nCALL 1140 <.plt.sec@start+0x60> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nMOVSS (%RSP),%XMM1              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 0       | 0.50              | scal (12.5%)\nMOV 0xe8(%RSP),%RDX             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nTEST %RDX,%RDX                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (25.0%)\nJS 169e <main+0x51e>            | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1            | N/A\nPXOR %XMM0,%XMM0                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nCVTSI2SS %RDX,%XMM0             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nDIVSS %XMM1,%XMM0               | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 10-13   | 7                 | scal (12.5%)\nMOV $0x2,%EDI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nLEA 0xb91(%RIP),%RSI            | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nCVTSS2SD %XMM0,%XMM0            | 2     | 1    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 2       | 1                 | scal (12.5%)\nCALL 1140 <.plt.sec@start+0x60> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nMOV 0x70(%RSP),%RAX             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | N/A\nMOV 0xe8(%RSP),%RDX             | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 0.50              | scal (25.0%)\nSUB %RAX,%RDX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (25.0%)\nJS 1680 <main+0x500>            | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1            | N/A\nPXOR %XMM0,%XMM0                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nCVTSI2SS %RDX,%XMM0             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nMULSS 0xae1(%RIP),%XMM0         | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 5       | 0.50              | scal (12.5%)\nTEST %RAX,%RAX                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nJS 1662 <main+0x4e2>            | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1            | N/A\nPXOR %XMM1,%XMM1                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nCVTSI2SS %RAX,%XMM1             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nDIVSS %XMM1,%XMM0               | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 10-13   | 7                 | scal (12.5%)\nCOMISS 0xac8(%RIP),%XMM0        | 2     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 1                 | scal (12.5%)\nJAE 16dc <main+0x55c>           | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50-1            | N/A\nCOMISS 0xabf(%RIP),%XMM0        | 2     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0    | 2       | 1                 | scal (12.5%)\nPXOR %XMM1,%XMM1                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nCVTSS2SD %XMM0,%XMM1            | 2     | 1    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 2       | 1                 | scal (12.5%)\nMOVAPD %XMM1,%XMM0              | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nJB 16bf <main+0x53f>            | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 0       | 0.50              | N/A\nLEA 0xbb2(%RIP),%RSI            | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOV $0x2,%EDI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nCALL 1140 <.plt.sec@start+0x60> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nXOR %EAX,%EAX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nJMP 11d0 <main+0x50>            | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0    | 0       | 1-2               | N/A\nMOV %RDX,%RAX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV %RDX,%RCX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nPXOR %XMM0,%XMM0                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nSHR $0x1,%RAX                   | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 1       | 0.50              | N/A\nAND $0x1,%ECX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nOR %RCX,%RAX                    | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nCVTSI2SS %RAX,%XMM0             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nADDSS %XMM0,%XMM0               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0    | 3       | 1                 | scal (12.5%)\nJMP 14a0 <main+0x320>           | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0    | 0       | 1-2               | N/A\nMOV %RAX,%RDX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | scal (25.0%)\nAND $0x1,%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nPXOR %XMM1,%XMM1                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nSHR $0x1,%RDX                   | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 1       | 0.50              | scal (25.0%)\nOR %RAX,%RDX                    | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (25.0%)\nCVTSI2SS %RDX,%XMM1             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nADDSS %XMM1,%XMM1               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0    | 3       | 1                 | scal (12.5%)\nJMP 1539 <main+0x3b9>           | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0    | 0       | 1-2               | N/A\nMOV %RDX,%RCX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nAND $0x1,%EDX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nPXOR %XMM0,%XMM0                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nSHR $0x1,%RCX                   | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 1       | 0.50              | N/A\nOR %RDX,%RCX                    | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nCVTSI2SS %RCX,%XMM0             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nADDSS %XMM0,%XMM0               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0    | 3       | 1                 | scal (12.5%)\nJMP 151f <main+0x39f>           | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0    | 0       | 1-2               | N/A\nMOV %RDX,%RAX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nMOV %RDX,%RCX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nPXOR %XMM0,%XMM0                | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | vect (50.0%)\nSHR $0x1,%RAX                   | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0    | 1       | 0.50              | N/A\nAND $0x1,%ECX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nOR %RCX,%RAX                    | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nCVTSI2SS %RAX,%XMM0             | 3     | 0    | 1    | 0    | 0    | 0  | 2    | 0    | 0    | 0       | 2                 | scal (25.0%)\nADDSS %XMM0,%XMM0               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0    | 3       | 1                 | scal (12.5%)\nJMP 14e2 <main+0x362>           | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0    | 0       | 1-2               | N/A\nLEA 0xa72(%RIP),%RSI            | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOV $0x2,%EDI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nCALL 1140 <.plt.sec@start+0x60> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nXOR %EAX,%EAX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nJMP 11d0 <main+0x50>            | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0    | 0       | 1-2               | N/A\nLEA 0xa21(%RIP),%RSI            | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0    | 1       | 0.50              | N/A\nMOV $0x2,%EDI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0    | 1       | 0.25              | N/A\nCVTSS2SD %XMM0,%XMM0            | 2     | 1    | 0    | 0    | 0    | 0  | 1    | 0    | 0    | 2       | 1                 | scal (12.5%)\nCALL 1140 <.plt.sec@start+0x60> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nXOR %EAX,%EAX                   | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nJMP 11d0 <main+0x50>            | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0    | 0       | 1-2               | N/A\nCALL 1100 <.plt.sec@start+0x20> | 2     | 0    | 0    | 0.33 | 0.33 | 1  | 0    | 1    | 0.33 | 0       | 2                 | N/A\nNOPW %CS:(%RAX,%RAX,1)          | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\nNOPL (%RAX)                     | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0    | 0       | 0.25              | N/A\n"
                }
              ],
            "header":
              [
              "Warnings:\n - The number of fused uops of the instruction [ENDBR64] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
              "0% of peak computational performance is used (0.15 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 54.75 to 22.00 cycles (2.49x speedup)."
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your function is probably not vectorized.\nOnly 22% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 54.75 to 8.14 cycles (6.73x speedup)."
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
                }
              ],
            "potential":
              [
                {
                  "workaround": " - Recompile with march=core-avx2.\nCQA target is Core_4x_Xeon_E3_v3_other (4th Generation Intel Core processor and Intel Xeon processor E3-1200 v3 product family based on Haswell microarchitecture) but specialization flags are -march=x86-64\n - Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).\n",
                  "title": "FMA",
                  "txt": "Presence of both ADD/SUB and MUL operations."
                }
              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The function is defined in:\n - /usr/include/stdlib.h:483\n - /usr/include/x86_64-linux-gnu/bits/stdio2.h:79,86\n - /home/linuxbox/AOA-Project5/driver.c:13-24,35-51,57-103\n\n",
            "Warnings:\nIgnoring paths for analysis"
            ]
        }
    }
}
